export default [{"data":{"key":"v-245bbacd","path":"/how-to-write-article.html","title":"JavaScript数据类型的相关问题看这篇文章就够了","lang":"zh-CN","frontmatter":{"date":"2022/1/20 10:08","coverUrl":"https://pic1.zhimg.com/80/v2-904505bcf0c424788f6028b8952aa2e7_1440w.jpg?source=1940ef5c","sticky":true,"keyword":"设置keyword,设置keyword,设置keyword,设置keyword","description":"JavaScript 数据类型种类、存储方式、判断方法","title":"JavaScript数据类型的相关问题看这篇文章就够了","tag":["笔记"],"categories":["Javascript"]},"excerpt":"","headers":[{"level":2,"title":"了解强、弱类型和动态、静态类型语言","slug":"了解强、弱类型和动态、静态类型语言","children":[{"level":3,"title":"强类型","slug":"强类型","children":[]},{"level":3,"title":"弱类型","slug":"弱类型","children":[]},{"level":3,"title":"静态类型","slug":"静态类型","children":[]},{"level":3,"title":"动态类型","slug":"动态类型","children":[]}]},{"level":2,"title":"基本数据类型","slug":"基本数据类型","children":[]},{"level":2,"title":"引用数据类型","slug":"引用数据类型","children":[{"level":3,"title":"引用类型的检索","slug":"引用类型的检索","children":[]}]},{"level":2,"title":"拓展：深浅拷贝","slug":"拓展-深浅拷贝","children":[{"level":3,"title":"手写方法实现深拷贝：","slug":"手写方法实现深拷贝","children":[]}]},{"level":2,"title":"typeof方法","slug":"typeof方法","children":[]},{"level":2,"title":"拓展：为什么null返回的是一个object呢？","slug":"拓展-为什么null返回的是一个object呢","children":[]},{"level":2,"title":"instanceof方法","slug":"instanceof方法","children":[]}],"git":{}},"key":"v-245bbacd","path":"/how-to-write-article.html","title":"JavaScript数据类型的相关问题看这篇文章就够了","lang":"zh-CN","frontmatter":{"date":"2022/1/20 10:08","coverUrl":"https://pic1.zhimg.com/80/v2-904505bcf0c424788f6028b8952aa2e7_1440w.jpg?source=1940ef5c","sticky":true,"keyword":"设置keyword,设置keyword,设置keyword,设置keyword","description":"JavaScript 数据类型种类、存储方式、判断方法","title":"JavaScript数据类型的相关问题看这篇文章就够了","tag":["笔记"],"categories":["Javascript"]},"excerpt":"","headers":[{"level":2,"title":"了解强、弱类型和动态、静态类型语言","slug":"了解强、弱类型和动态、静态类型语言","children":[{"level":3,"title":"强类型","slug":"强类型","children":[]},{"level":3,"title":"弱类型","slug":"弱类型","children":[]},{"level":3,"title":"静态类型","slug":"静态类型","children":[]},{"level":3,"title":"动态类型","slug":"动态类型","children":[]}]},{"level":2,"title":"基本数据类型","slug":"基本数据类型","children":[]},{"level":2,"title":"引用数据类型","slug":"引用数据类型","children":[{"level":3,"title":"引用类型的检索","slug":"引用类型的检索","children":[]}]},{"level":2,"title":"拓展：深浅拷贝","slug":"拓展-深浅拷贝","children":[{"level":3,"title":"手写方法实现深拷贝：","slug":"手写方法实现深拷贝","children":[]}]},{"level":2,"title":"typeof方法","slug":"typeof方法","children":[]},{"level":2,"title":"拓展：为什么null返回的是一个object呢？","slug":"拓展-为什么null返回的是一个object呢","children":[]},{"level":2,"title":"instanceof方法","slug":"instanceof方法","children":[]}],"content":"\r\n\r\n# JavaScript 数据类型\r\n值类型（基本类型）有7种，分别是 \r\n- undefined\r\n- null\r\n- Boolean\r\n- String\r\n- Number\r\n- Symbol(ES6新增)\r\n- BigInt(ES10新增)\r\n\r\n引用类型：\r\n- Object\r\n- Array\r\n- function\r\n- Set\r\n- Map\r\n- WeakMap\r\n- WeakSet\r\n- RegExp\r\n- Date\r\n- Math…\r\n# 拓展：JavaScript 是一种动态弱类型语言。\r\n这意味着相同的变量可用作不同的类型：\r\n\r\n```js\r\nvar x;               // x 为 undefined\r\nvar x = 5;           // 现在 x 为数字\r\nvar x = \"John\";      // 现在 x 为字符串\r\n```\r\n## 了解强、弱类型和动态、静态类型语言\r\n### 强类型\r\n\r\n-   语言层面限制函数的实参类型必须与形参类型相同\r\n-   强类型语言中不允许任意的隐式类型转换\r\n\r\n### 弱类型\r\n\r\n-   弱类型语言层面不会限制实参的类型\r\n-   弱类型语言允许任意的数据隐式类型转换\r\n\r\n### 静态类型\r\n\r\n一个变量声明时它的类型就是明确的，声明过后它的类型不再允许修改\r\n\r\n### 动态类型\r\n\r\n- 运行阶段才能够明确变量类型，变量的类型随时可以改变\r\n\r\n- 动态类型语言中的变量没有类型，变量中存放的值才有类型\r\n# 基本数据类型和引用数据类型的存储方式：\r\n## 基本数据类型\r\n基本数据类型存储在**栈内存**，存储的是**值**。\r\n> 原始类型存储的都是值，是没有函数可以调用的。\r\n## 引用数据类型\r\n引用数据类型的值存储在**堆内存**，**地址指针**（该指针指向堆中的该实体）存储在栈内存。\r\n> 之所以引用数据类型存储在堆内存中，是因为引用数据类型占据空间大、占用内存不固定。 如果存储在栈中，将会影响程序运行的性能。\r\n### 引用类型的检索\r\n当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体；所以当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。上述的赋值行为发生**浅拷贝**：拷贝的是栈中的内存地址，所以如果其中一个对象改变了这个地址里的值，就会影响到另一个对象。\r\n## 拓展：深浅拷贝\r\n在JavaScript中，基本类型 值的复制是直接拷贝一份新的一模一样的数据，这两份数据相互独立，互不影响。而引用类型值的复制则为传递对象的引用，则需要考虑深浅拷贝的问题。\r\n\r\n-   深拷贝：创建一个新的对象，将一个对象从内存中**完整地拷贝**出来一份给该新对象，并从**堆内存中开辟一个全新的空间存放新对象**，且新对象的修改并不会改变原对象。\r\n\r\n```js\r\nlet arr = [1, 2, 3, 4, 5]\r\nlet arr2 =JSON.parse(JSON.stringify(arr))       \r\n// arr.slice()    // [...arr]     //[].concat(arr)    皆可实现数组的深拷贝\r\n// JSON.parse(JSON.stringify(arr))  先将arr变成字符串  然后再将arr变成对象\r\n\r\narr[0] = 0\r\nconsole.log(arr2);      // [1, 2, 3, 4, 5]\r\n```\r\n\r\n-   浅拷贝：创建一个新的对象，来接收你要拷贝的对象的值，复制的是**栈内存中存放的的地址**，所以两者指向的**仍然是堆里的同一个对象**，所以如果其中一个对象改变了栈内存中存放的地址所指向的对象，就会影响到另一个对象。\r\n\r\n```js\r\nlet c = {name:'小明', age: 18}\r\nlet d = c\r\nc.age = 19\r\nconsole.log(d);   // { name: '小明', age: 19 }\r\n```\r\n\r\n### 手写方法实现深拷贝：\r\n\r\n```js\r\nlet person = {\r\n    name: '小明',\r\n    age: 18,\r\n    like: {\r\n        sport: 'running',\r\n        food: 'beef'\r\n    }\r\n}\r\n\r\nfunction deepCopy(obj) {\r\n    let n = obj instanceof Array ? [] : {}     // 判断是否为Array  来判断创建n的数据类型\r\n    for (let item in obj) {\r\n        if (obj.hasOwnProperty(item)) {     // 判断是自己的  还是原型上继承下来的\r\n            n[item] = obj[item] instanceof Object ? deepCopy(obj[item]) : obj[item]    \r\n            // 判断item是否还是对象或数组\r\n        }\r\n    }\r\n    return n\r\n}\r\n\r\nlet newPerson = deepCopy(person)\r\nperson.like.sport = 'swimming'\r\nconsole.log(newPerson);     // { name: '小明', age: 18, like: { sport: 'running', food: 'beef' } }\r\nconsole.log(person);       // { name: '小明', age: 18, like: { sport: 'swimming', food: 'beef' } }\r\n\r\n```\r\n\r\n\r\n\r\n# 判断数据类型的方法\r\n## typeof方法\r\n可以通过typeof检测基本类型和引用类型，不过检测出来的引用类型都是对象：\r\n\r\n```js\r\nconsole.log(\r\n    typeof 123,     //number\r\n    typeof 'abc',   //string\r\n    typeof false,   //boolean\r\n    typeof undefined, //undefined\r\n    typeof null, //object\r\n    typeof function(){console.log('aaa');}, // function\r\n    typeof new Date(), //object\r\n    typeof [1,2,3], //object\r\n    typeof {a:1,b:2,c:3}   //object\r\n);\r\n```\r\n首先 **typeof** 能够正确的判断基本数据类型，但除了null, **typeof null所输出的为object**。\r\n但是对于对象来说，`typeof`也不能正确的判断其类型， 如`typeof`一个函数可以输出 `function`,而除此之外，输出的全是` object`,这种情况下，我们无法准确的知道对象的类型。\r\n## 拓展：为什么null返回的是一个object呢？\r\njs 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息\r\n-   000：对象\r\n-   010：浮点数\r\n-   100：字符串\r\n-   110：布尔\r\n-   1：整数\r\n在JS的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 `null` 表示为全零，所以typeof错误的将它判断为 `object` 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。\r\n\r\n#### null 和 undefined 的区别：\r\n- `null` 是 javascript 的关键字，表示一个特殊值，常用来描述\"空值\"，typeof 运算返回\"object\"。\r\n- `undefined` 是预定义的全局变量，他的值就是\"未定义\"， typeof 运算返回 \"undefined\"\r\n- `undefined` 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。\r\n- 相对来说，null更接近其他语言的空、而undefined则是js特有的机制\r\n## instanceof方法\r\n由上可知`typeof`来判断引用类型是不准确的，故想要检测引用类型可以通过 **instanceof**\r\n\r\n    语法：object instanceof constructor（object为实例对象，constructor为构造函数）\r\n    \r\n关于**instanceof** 的实现原理的理解，可参考下面的代码：\r\n\r\n```js\r\nfunction instance_of (left, right){\r\n    let leftVal = left.__proto__\r\n    let rightVal = right.prototype\r\n    while(true){\r\n        if(leftVal === null) return false\r\n        if(leftVal === rightVal)  return true\r\n        leftVal = leftVal.__proto__\r\n    }\r\n}\r\nlet a = [1, 2, 3]\r\nconsole.log(instance_of(a,Array));    // true\r\n```\r\n由此可知`instanceof`是顺着**原型链**去找，直到找到相同的原型对象，返回true，否则为false。\r\n\r\n**instanceof**可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型\r\n\r\n","contentRendered":"<h1 id=\"javascript-数据类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#javascript-数据类型\" aria-hidden=\"true\">#</a> JavaScript 数据类型</h1>\n<p>值类型（基本类型）有7种，分别是</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Symbol(ES6新增)</li>\n<li>BigInt(ES10新增)</li>\n</ul>\n<p>引用类型：</p>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>function</li>\n<li>Set</li>\n<li>Map</li>\n<li>WeakMap</li>\n<li>WeakSet</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Math…</li>\n</ul>\n<h1 id=\"拓展-javascript-是一种动态弱类型语言。\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#拓展-javascript-是一种动态弱类型语言。\" aria-hidden=\"true\">#</a> 拓展：JavaScript 是一种动态弱类型语言。</h1>\n<p>这意味着相同的变量可用作不同的类型：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// x 为 undefined</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 现在 x 为数字</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 现在 x 为字符串</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><h2 id=\"了解强、弱类型和动态、静态类型语言\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#了解强、弱类型和动态、静态类型语言\" aria-hidden=\"true\">#</a> 了解强、弱类型和动态、静态类型语言</h2>\n<h3 id=\"强类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#强类型\" aria-hidden=\"true\">#</a> 强类型</h3>\n<ul>\n<li>语言层面限制函数的实参类型必须与形参类型相同</li>\n<li>强类型语言中不允许任意的隐式类型转换</li>\n</ul>\n<h3 id=\"弱类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#弱类型\" aria-hidden=\"true\">#</a> 弱类型</h3>\n<ul>\n<li>弱类型语言层面不会限制实参的类型</li>\n<li>弱类型语言允许任意的数据隐式类型转换</li>\n</ul>\n<h3 id=\"静态类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#静态类型\" aria-hidden=\"true\">#</a> 静态类型</h3>\n<p>一个变量声明时它的类型就是明确的，声明过后它的类型不再允许修改</p>\n<h3 id=\"动态类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态类型\" aria-hidden=\"true\">#</a> 动态类型</h3>\n<ul>\n<li>\n<p>运行阶段才能够明确变量类型，变量的类型随时可以改变</p>\n</li>\n<li>\n<p>动态类型语言中的变量没有类型，变量中存放的值才有类型</p>\n</li>\n</ul>\n<h1 id=\"基本数据类型和引用数据类型的存储方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本数据类型和引用数据类型的存储方式\" aria-hidden=\"true\">#</a> 基本数据类型和引用数据类型的存储方式：</h1>\n<h2 id=\"基本数据类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本数据类型\" aria-hidden=\"true\">#</a> 基本数据类型</h2>\n<p>基本数据类型存储在<strong>栈内存</strong>，存储的是<strong>值</strong>。</p>\n<blockquote>\n<p>原始类型存储的都是值，是没有函数可以调用的。</p>\n</blockquote>\n<h2 id=\"引用数据类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引用数据类型\" aria-hidden=\"true\">#</a> 引用数据类型</h2>\n<p>引用数据类型的值存储在<strong>堆内存</strong>，<strong>地址指针</strong>（该指针指向堆中的该实体）存储在栈内存。</p>\n<blockquote>\n<p>之所以引用数据类型存储在堆内存中，是因为引用数据类型占据空间大、占用内存不固定。 如果存储在栈中，将会影响程序运行的性能。</p>\n</blockquote>\n<h3 id=\"引用类型的检索\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引用类型的检索\" aria-hidden=\"true\">#</a> 引用类型的检索</h3>\n<p>当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体；所以当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。上述的赋值行为发生<strong>浅拷贝</strong>：拷贝的是栈中的内存地址，所以如果其中一个对象改变了这个地址里的值，就会影响到另一个对象。</p>\n<h2 id=\"拓展-深浅拷贝\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#拓展-深浅拷贝\" aria-hidden=\"true\">#</a> 拓展：深浅拷贝</h2>\n<p>在JavaScript中，基本类型 值的复制是直接拷贝一份新的一模一样的数据，这两份数据相互独立，互不影响。而引用类型值的复制则为传递对象的引用，则需要考虑深浅拷贝的问题。</p>\n<ul>\n<li>深拷贝：创建一个新的对象，将一个对象从内存中<strong>完整地拷贝</strong>出来一份给该新对象，并从<strong>堆内存中开辟一个全新的空间存放新对象</strong>，且新对象的修改并不会改变原对象。</li>\n</ul>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       \n<span class=\"token comment\">// arr.slice()    // [...arr]     //[].concat(arr)    皆可实现数组的深拷贝</span>\n<span class=\"token comment\">// JSON.parse(JSON.stringify(arr))  先将arr变成字符串  然后再将arr变成对象</span>\n\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><ul>\n<li>浅拷贝：创建一个新的对象，来接收你要拷贝的对象的值，复制的是<strong>栈内存中存放的的地址</strong>，所以两者指向的<strong>仍然是堆里的同一个对象</strong>，所以如果其中一个对象改变了栈内存中存放的地址所指向的对象，就会影响到另一个对象。</li>\n</ul>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> c\nc<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// { name: '小明', age: 19 }</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h3 id=\"手写方法实现深拷贝\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#手写方法实现深拷贝\" aria-hidden=\"true\">#</a> 手写方法实现深拷贝：</h3>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">like</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">sport</span><span class=\"token operator\">:</span> <span class=\"token string\">'running'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">food</span><span class=\"token operator\">:</span> <span class=\"token string\">'beef'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">// 判断是否为Array  来判断创建n的数据类型</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 判断是自己的  还是原型上继承下来的</span>\n            n<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span>    \n            <span class=\"token comment\">// 判断item是否还是对象或数组</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> newPerson <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\nperson<span class=\"token punctuation\">.</span>like<span class=\"token punctuation\">.</span>sport <span class=\"token operator\">=</span> <span class=\"token string\">'swimming'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// { name: '小明', age: 18, like: { sport: 'running', food: 'beef' } }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// { name: '小明', age: 18, like: { sport: 'swimming', food: 'beef' } }</span>\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div></div><h1 id=\"判断数据类型的方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#判断数据类型的方法\" aria-hidden=\"true\">#</a> 判断数据类型的方法</h1>\n<h2 id=\"typeof方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#typeof方法\" aria-hidden=\"true\">#</a> typeof方法</h2>\n<p>可以通过typeof检测基本类型和引用类型，不过检测出来的引用类型都是对象：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">//number</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//string</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//boolean</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//undefined</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//object</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// function</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//object</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//object</span>\n    <span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\">//object</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>首先 <strong>typeof</strong> 能够正确的判断基本数据类型，但除了null, <strong>typeof null所输出的为object</strong>。\n但是对于对象来说，<code>typeof</code>也不能正确的判断其类型， 如<code>typeof</code>一个函数可以输出 <code>function</code>,而除此之外，输出的全是<code> object</code>,这种情况下，我们无法准确的知道对象的类型。</p>\n<h2 id=\"拓展-为什么null返回的是一个object呢\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#拓展-为什么null返回的是一个object呢\" aria-hidden=\"true\">#</a> 拓展：为什么null返回的是一个object呢？</h2>\n<p>js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息</p>\n<ul>\n<li>000：对象</li>\n<li>010：浮点数</li>\n<li>100：字符串</li>\n<li>110：布尔</li>\n<li>1：整数\n在JS的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 <code>null</code> 表示为全零，所以typeof错误的将它判断为 <code>object</code> 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</li>\n</ul>\n<h4 id=\"null-和-undefined-的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#null-和-undefined-的区别\" aria-hidden=\"true\">#</a> null 和 undefined 的区别：</h4>\n<ul>\n<li><code>null</code> 是 javascript 的关键字，表示一个特殊值，常用来描述&quot;空值&quot;，typeof 运算返回&quot;object&quot;。</li>\n<li><code>undefined</code> 是预定义的全局变量，他的值就是&quot;未定义&quot;， typeof 运算返回 &quot;undefined&quot;</li>\n<li><code>undefined</code> 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。</li>\n<li>相对来说，null更接近其他语言的空、而undefined则是js特有的机制</li>\n</ul>\n<h2 id=\"instanceof方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#instanceof方法\" aria-hidden=\"true\">#</a> instanceof方法</h2>\n<p>由上可知<code>typeof</code>来判断引用类型是不准确的，故想要检测引用类型可以通过 <strong>instanceof</strong></p>\n<pre><code>语法：object instanceof constructor（object为实例对象，constructor为构造函数）\n</code></pre>\n<p>关于<strong>instanceof</strong> 的实现原理的理解，可参考下面的代码：</p>\n<div class=\"language-javascript ext-js line-numbers-mode\"><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">instance_of</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> leftVal <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\n    <span class=\"token keyword\">let</span> rightVal <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftVal <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftVal <span class=\"token operator\">===</span> rightVal<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        leftVal <span class=\"token operator\">=</span> leftVal<span class=\"token punctuation\">.</span>__proto__\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">instance_of</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// true</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><p>由此可知<code>instanceof</code>是顺着<strong>原型链</strong>去找，直到找到相同的原型对象，返回true，否则为false。</p>\n<p><strong>instanceof</strong>可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</p>\n","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":"/how-to-write-article.html","pathLocale":"/","permalink":null,"routeMeta":{},"slug":"how-to-write-article","filePath":"C:/Users/mi/Desktop/新建文件夹/docs/how-to-write-article.md","filePathRelative":"how-to-write-article.md","componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/how-to-write-article.html.vue","componentFilePathRelative":"pages/how-to-write-article.html.vue","componentFileChunkName":"v-245bbacd","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/how-to-write-article.html.js","dataFilePathRelative":"pages/how-to-write-article.html.js","dataFileChunkName":"v-245bbacd","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/how-to-write-article.html","htmlFilePathRelative":"how-to-write-article.html"},{"data":{"key":"v-3706649a","path":"/404.html","title":"","lang":"zh-CN","frontmatter":{"layout":"404"},"excerpt":"","headers":[],"git":{}},"key":"v-3706649a","path":"/404.html","title":"","lang":"zh-CN","frontmatter":{"layout":"404"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/404.html.vue","componentFilePathRelative":"pages/404.html.vue","componentFileChunkName":"v-3706649a","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/404.html.js","dataFilePathRelative":"pages/404.html.js","dataFileChunkName":"v-3706649a","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/404.html","htmlFilePathRelative":"404.html"},{"data":{"key":"v-8daa1a0e","path":"/","title":"","lang":"zh-CN","frontmatter":{"layout":"Layout","home":true},"excerpt":"","headers":[],"git":{}},"key":"v-8daa1a0e","path":"/","title":"","lang":"zh-CN","frontmatter":{"layout":"Layout","home":true},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/index.html.vue","componentFilePathRelative":"pages/index.html.vue","componentFileChunkName":"v-8daa1a0e","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/index.html.js","dataFilePathRelative":"pages/index.html.js","dataFileChunkName":"v-8daa1a0e","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/index.html","htmlFilePathRelative":"index.html"},{"data":{"key":"v-74bc627b","path":"/about/","title":"","lang":"zh-CN","frontmatter":{"layout":"About","slug":"aurora-about"},"excerpt":"","headers":[],"git":{}},"key":"v-74bc627b","path":"/about/","title":"","lang":"zh-CN","frontmatter":{"layout":"About","slug":"aurora-about"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/about/index.html.vue","componentFilePathRelative":"pages/about/index.html.vue","componentFileChunkName":"v-74bc627b","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/about/index.html.js","dataFilePathRelative":"pages/about/index.html.js","dataFileChunkName":"v-74bc627b","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/about/index.html","htmlFilePathRelative":"about/index.html"},{"data":{"key":"v-14f724bf","path":"/mood/","title":"","lang":"zh-CN","frontmatter":{"layout":"Mood","slug":"aurora-mood"},"excerpt":"","headers":[],"git":{}},"key":"v-14f724bf","path":"/mood/","title":"","lang":"zh-CN","frontmatter":{"layout":"Mood","slug":"aurora-mood"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/mood/index.html.vue","componentFilePathRelative":"pages/mood/index.html.vue","componentFileChunkName":"v-14f724bf","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/mood/index.html.js","dataFilePathRelative":"pages/mood/index.html.js","dataFileChunkName":"v-14f724bf","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/mood/index.html","htmlFilePathRelative":"mood/index.html"},{"data":{"key":"v-14e6501c","path":"/link/","title":"","lang":"zh-CN","frontmatter":{"layout":"Link","slug":"aurora-link"},"excerpt":"","headers":[],"git":{}},"key":"v-14e6501c","path":"/link/","title":"","lang":"zh-CN","frontmatter":{"layout":"Link","slug":"aurora-link"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/link/index.html.vue","componentFilePathRelative":"pages/link/index.html.vue","componentFileChunkName":"v-14e6501c","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/link/index.html.js","dataFilePathRelative":"pages/link/index.html.js","dataFileChunkName":"v-14e6501c","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/link/index.html","htmlFilePathRelative":"link/index.html"},{"data":{"key":"v-744d024e","path":"/tag/","title":"","lang":"zh-CN","frontmatter":{"layout":"Tag","slug":"aurora-tag"},"excerpt":"","headers":[],"git":{}},"key":"v-744d024e","path":"/tag/","title":"","lang":"zh-CN","frontmatter":{"layout":"Tag","slug":"aurora-tag"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/tag/index.html.vue","componentFilePathRelative":"pages/tag/index.html.vue","componentFileChunkName":"v-744d024e","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/tag/index.html.js","dataFilePathRelative":"pages/tag/index.html.js","dataFileChunkName":"v-744d024e","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/tag/index.html","htmlFilePathRelative":"tag/index.html"},{"data":{"key":"v-705c21a6","path":"/archive/","title":"","lang":"zh-CN","frontmatter":{"layout":"Archive","slug":"aurora-archive"},"excerpt":"","headers":[],"git":{}},"key":"v-705c21a6","path":"/archive/","title":"","lang":"zh-CN","frontmatter":{"layout":"Archive","slug":"aurora-archive"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/archive/index.html.vue","componentFilePathRelative":"pages/archive/index.html.vue","componentFileChunkName":"v-705c21a6","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/archive/index.html.js","dataFilePathRelative":"pages/archive/index.html.js","dataFileChunkName":"v-705c21a6","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/archive/index.html","htmlFilePathRelative":"archive/index.html"},{"data":{"key":"v-6629f178","path":"/aurora-coze/","title":"","lang":"zh-CN","frontmatter":{"layout":"CozeMood","slug":"aurora-coze-mood"},"excerpt":"","headers":[],"git":{}},"key":"v-6629f178","path":"/aurora-coze/","title":"","lang":"zh-CN","frontmatter":{"layout":"CozeMood","slug":"aurora-coze-mood"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue","componentFilePathRelative":"pages/aurora-coze/index.html.vue","componentFileChunkName":"v-6629f178","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-coze/index.html.js","dataFilePathRelative":"pages/aurora-coze/index.html.js","dataFileChunkName":"v-6629f178","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/aurora-coze/index.html","htmlFilePathRelative":"aurora-coze/index.html"},{"data":{"key":"v-f693f690","path":"/aurora-register/","title":"","lang":"zh-CN","frontmatter":{"layout":"RegisterUser","slug":"aurora-coze-register"},"excerpt":"","headers":[],"git":{}},"key":"v-f693f690","path":"/aurora-register/","title":"","lang":"zh-CN","frontmatter":{"layout":"RegisterUser","slug":"aurora-coze-register"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-register/index.html.vue","componentFilePathRelative":"pages/aurora-register/index.html.vue","componentFileChunkName":"v-f693f690","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-register/index.html.js","dataFilePathRelative":"pages/aurora-register/index.html.js","dataFileChunkName":"v-f693f690","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/aurora-register/index.html","htmlFilePathRelative":"aurora-register/index.html"},{"data":{"key":"v-e2acc714","path":"/photo/","title":"","lang":"zh-CN","frontmatter":{"layout":"CozePhoto","slug":"aurora-photo"},"excerpt":"","headers":[],"git":{}},"key":"v-e2acc714","path":"/photo/","title":"","lang":"zh-CN","frontmatter":{"layout":"CozePhoto","slug":"aurora-photo"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/photo/index.html.vue","componentFilePathRelative":"pages/photo/index.html.vue","componentFileChunkName":"v-e2acc714","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/photo/index.html.js","dataFilePathRelative":"pages/photo/index.html.js","dataFileChunkName":"v-e2acc714","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/photo/index.html","htmlFilePathRelative":"photo/index.html"},{"data":{"key":"v-3c506944","path":"/aurora-music/","title":"","lang":"zh-CN","frontmatter":{"layout":"AuroraMusic","slug":"aurora-plugin-music"},"excerpt":"","headers":[],"git":{}},"key":"v-3c506944","path":"/aurora-music/","title":"","lang":"zh-CN","frontmatter":{"layout":"AuroraMusic","slug":"aurora-plugin-music"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-music/index.html.vue","componentFilePathRelative":"pages/aurora-music/index.html.vue","componentFileChunkName":"v-3c506944","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-music/index.html.js","dataFilePathRelative":"pages/aurora-music/index.html.js","dataFileChunkName":"v-3c506944","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/aurora-music/index.html","htmlFilePathRelative":"aurora-music/index.html"},{"data":{"key":"v-3279cf61","path":"/aurora-archive/","title":"","lang":"zh-CN","frontmatter":{"layout":"AuroraArchive","slug":"aurora-plugin-archive"},"excerpt":"","headers":[],"git":{}},"key":"v-3279cf61","path":"/aurora-archive/","title":"","lang":"zh-CN","frontmatter":{"layout":"AuroraArchive","slug":"aurora-plugin-archive"},"excerpt":"","headers":[],"content":"","contentRendered":"","date":"0000-00-00","deps":[],"hoistedTags":[],"links":[],"pathInferred":null,"pathLocale":"/","permalink":null,"routeMeta":{},"slug":"","filePath":null,"filePathRelative":null,"componentFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue","componentFilePathRelative":"pages/aurora-archive/index.html.vue","componentFileChunkName":"v-3279cf61","dataFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/.temp/pages/aurora-archive/index.html.js","dataFilePathRelative":"pages/aurora-archive/index.html.js","dataFileChunkName":"v-3279cf61","htmlFilePath":"C:/Users/mi/Desktop/新建文件夹/docs/.vuepress/dist/aurora-archive/index.html","htmlFilePathRelative":"aurora-archive/index.html"}]