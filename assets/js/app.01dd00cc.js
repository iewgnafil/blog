"use strict";(self.webpackChunkIEWGANFIL=self.webpackChunkIEWGANFIL||[]).push([[143],{6396:(n,a,s)=>{s.d(a,{g:()=>d});var e=s(7478),t=s(5748),p=s(1598),o=s(1341),l=s(1843),r=s(6911),c=s(881),i=s(9146);const u=(0,s(7621).vW)((({app:n,router:a,siteData:s})=>{})),d=[e.Z,t.Z,p.Z,o.Z,l.Z,r.Z,c.Z,i.Z,u]},9947:(n,a,s)=>{s.d(a,{p:()=>p});var e=s(3051),t=s(8805);const p=[e.Z,t.Z]},4611:(n,a,s)=>{s.d(a,{l:()=>o});var e=s(1263),t=s(6243),p=s(7593);const o=[e.Z,t.Z,p.Z]},4150:(n,a,s)=>{s.d(a,{Z:()=>t});var e=s(6252);const t={404:(0,e.RC)((()=>Promise.all([s.e(973),s.e(431)]).then(s.bind(s,2431)))),Layout:(0,e.RC)((()=>s.e(887).then(s.bind(s,8887))))}},6056:(n,a,s)=>{s.d(a,{b:()=>t});var e=s(6252);const t={"v-245bbacd":(0,e.RC)((()=>s.e(685).then(s.bind(s,7802)))),"v-7ffc659c":(0,e.RC)((()=>s.e(529).then(s.bind(s,5107)))),"v-7c92b45e":(0,e.RC)((()=>s.e(459).then(s.bind(s,4272)))),"v-79290320":(0,e.RC)((()=>s.e(271).then(s.bind(s,1479)))),"v-75bf51e2":(0,e.RC)((()=>s.e(628).then(s.bind(s,3190)))),"v-3706649a":(0,e.RC)((()=>s.e(88).then(s.bind(s,8109)))),"v-8daa1a0e":(0,e.RC)((()=>s.e(509).then(s.bind(s,1829)))),"v-74bc627b":(0,e.RC)((()=>s.e(5).then(s.bind(s,9085)))),"v-14f724bf":(0,e.RC)((()=>s.e(69).then(s.bind(s,8784)))),"v-14e6501c":(0,e.RC)((()=>s.e(713).then(s.bind(s,779)))),"v-744d024e":(0,e.RC)((()=>s.e(146).then(s.bind(s,7034)))),"v-705c21a6":(0,e.RC)((()=>s.e(888).then(s.bind(s,8099)))),"v-6629f178":(0,e.RC)((()=>s.e(158).then(s.bind(s,7984)))),"v-f693f690":(0,e.RC)((()=>s.e(516).then(s.bind(s,2209)))),"v-e2acc714":(0,e.RC)((()=>s.e(356).then(s.bind(s,5506)))),"v-3c506944":(0,e.RC)((()=>s.e(219).then(s.bind(s,5455)))),"v-3279cf61":(0,e.RC)((()=>s.e(118).then(s.bind(s,1973))))}},9706:(n,a,s)=>{s.d(a,{T:()=>e});const e={"v-245bbacd":()=>s.e(685).then(s.bind(s,7018)).then((({data:n})=>n)),"v-7ffc659c":()=>s.e(529).then(s.bind(s,3573)).then((({data:n})=>n)),"v-7c92b45e":()=>s.e(459).then(s.bind(s,6676)).then((({data:n})=>n)),"v-79290320":()=>s.e(271).then(s.bind(s,3805)).then((({data:n})=>n)),"v-75bf51e2":()=>s.e(628).then(s.bind(s,2735)).then((({data:n})=>n)),"v-3706649a":()=>s.e(88).then(s.bind(s,1801)).then((({data:n})=>n)),"v-8daa1a0e":()=>s.e(509).then(s.bind(s,6464)).then((({data:n})=>n)),"v-74bc627b":()=>s.e(5).then(s.bind(s,2988)).then((({data:n})=>n)),"v-14f724bf":()=>s.e(69).then(s.bind(s,4770)).then((({data:n})=>n)),"v-14e6501c":()=>s.e(713).then(s.bind(s,4502)).then((({data:n})=>n)),"v-744d024e":()=>s.e(146).then(s.bind(s,6041)).then((({data:n})=>n)),"v-705c21a6":()=>s.e(888).then(s.bind(s,6762)).then((({data:n})=>n)),"v-6629f178":()=>s.e(158).then(s.bind(s,4141)).then((({data:n})=>n)),"v-f693f690":()=>s.e(516).then(s.bind(s,1442)).then((({data:n})=>n)),"v-e2acc714":()=>s.e(356).then(s.bind(s,6790)).then((({data:n})=>n)),"v-3c506944":()=>s.e(219).then(s.bind(s,3350)).then((({data:n})=>n)),"v-3279cf61":()=>s.e(118).then(s.bind(s,8588)).then((({data:n})=>n))}},4634:(n,a,s)=>{s.d(a,{g:()=>t});var e=s(4802);const t=[["v-245bbacd","/how-to-write-article.html",{},["/how-to-write-article","/how-to-write-article.md"]],["v-7ffc659c","/study/study1.html",{},["/study/study1","/study/study1.md"]],["v-7c92b45e","/study/study2.html",{},["/study/study2","/study/study2.md"]],["v-79290320","/study/study3.html",{},["/study/study3","/study/study3.md"]],["v-75bf51e2","/study/study4.html",{},["/study/study4","/study/study4.md"]],["v-3706649a","/404.html",{},["/404"]],["v-8daa1a0e","/",{},["/index.html"]],["v-74bc627b","/about/",{},["/about/index.html"]],["v-14f724bf","/mood/",{},["/mood/index.html"]],["v-14e6501c","/link/",{},["/link/index.html"]],["v-744d024e","/tag/",{},["/tag/index.html"]],["v-705c21a6","/archive/",{},["/archive/index.html"]],["v-6629f178","/aurora-coze/",{},["/aurora-coze/index.html"]],["v-f693f690","/aurora-register/",{},["/aurora-register/index.html"]],["v-e2acc714","/photo/",{},["/photo/index.html"]],["v-3c506944","/aurora-music/",{},["/aurora-music/index.html"]],["v-3279cf61","/aurora-archive/",{},["/aurora-archive/index.html"]]].reduce(((n,[a,s,t,p])=>(n.push({name:a,path:s,component:e.Y,meta:t},...p.map((n=>({path:n,redirect:s})))),n)),[{name:"404",path:"/:catchAll(.*)",component:e.Y}])},5472:(n,a,s)=>{s.d(a,{D:()=>e});const e=[{title:"JavaScript数据类型的相关问题看这篇文章就够了",headers:[{level:2,title:"了解强、弱类型和动态、静态类型语言",slug:"了解强、弱类型和动态、静态类型语言",children:[{level:3,title:"强类型",slug:"强类型",children:[]},{level:3,title:"弱类型",slug:"弱类型",children:[]},{level:3,title:"静态类型",slug:"静态类型",children:[]},{level:3,title:"动态类型",slug:"动态类型",children:[]}]},{level:2,title:"基本数据类型",slug:"基本数据类型",children:[]},{level:2,title:"引用数据类型",slug:"引用数据类型",children:[{level:3,title:"引用类型的检索",slug:"引用类型的检索",children:[]}]},{level:2,title:"拓展：深浅拷贝",slug:"拓展-深浅拷贝",children:[{level:3,title:"手写方法实现深拷贝：",slug:"手写方法实现深拷贝",children:[]}]},{level:2,title:"typeof方法",slug:"typeof方法",children:[]},{level:2,title:"拓展：为什么null返回的是一个object呢？",slug:"拓展-为什么null返回的是一个object呢",children:[]},{level:2,title:"instanceof方法",slug:"instanceof方法",children:[]}],path:"/how-to-write-article.html",pathLocale:"/",extraFields:[]},{title:"扁平化",headers:[{level:2,title:"实现方法",slug:"实现方法",children:[{level:3,title:"扩展：手写flat",slug:"扩展-手写flat",children:[]}]}],path:"/study/study1.html",pathLocale:"/",extraFields:[]},{title:"防抖和节流",headers:[],path:"/study/study2.html",pathLocale:"/",extraFields:[]},{title:"输出什么",headers:[{level:3,title:"map",slug:"map",children:[]},{level:3,title:"parseInt",slug:"parseint",children:[]},{level:3,title:"回到真实的事例上",slug:"回到真实的事例上",children:[]}],path:"/study/study3.html",pathLocale:"/",extraFields:[]},{title:"跨域",headers:[{level:2,title:"常见的跨域场景",slug:"常见的跨域场景",children:[]},{level:2,title:"特别说明",slug:"特别说明",children:[]},{level:2,title:"跨域的解决方案",slug:"跨域的解决方案",children:[{level:3,title:"1. jsonp",slug:"_1-jsonp",children:[]},{level:3,title:"2. cors",slug:"_2-cors",children:[]},{level:3,title:"3. postMessage",slug:"_3-postmessage",children:[]}]}],path:"/study/study4.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/404.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/about/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/link/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/tag/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-coze/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-register/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/photo/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-music/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-archive/",pathLocale:"/",extraFields:[]}]},5220:(n,a,s)=>{s.d(a,{H:()=>e});const e={base:"/blog/",lang:"zh-CN",title:"IEWGANFIL",description:"",head:[["script",{src:"https://at.alicdn.com/t/font_2849934_v6y652peian.js"}],["link",{href:"https://s2.loli.net/2022/01/21/PXGSkwrIpBiOUm4.jpg",rel:"icon"}],["link",{rel:"stylesheet",type:"text/css",href:"//at.alicdn.com/t/font_2932340_r7zitafg82.css"}]],locales:{}}},2232:(n,a,s)=>{s.d(a,{f:()=>e});const e={donate:{articlePage:!1},navbar:[{text:"算法相关",iconClass:"aurora-navbar-si-glyph-billiard-ball",children:[{text:"LeetCode",link:"https://leetcode-cn.com/problemset/all/"},{text:"书籍",link:"https://programmercarl.com/"}]},{text:"好用网站",iconClass:"aurora-navbar-si-glyph-glass-water",children:[{text:"网站",children:[{text:"掘金主页",link:"https://juejin.cn/user/1082363860234023"},{text:"MVCAT",link:"https://www.mvcat.com/movie/"},{text:"图片上传",link:"https://sm.ms/"},{text:"音乐转换",link:"https://link.hhtjim.com/"}]},{text:"文档",children:[{text:"MDN",link:"https://developer.mozilla.org/zh-CN/"},{text:"菜鸟教程",link:"https://www.runoob.com/"},{text:"vue",link:"https://cn.vuejs.org/"}]}]},{text:"学习相关",iconClass:"aurora-navbar-kechengguanli",children:[{text:"前端一百问",link:"https://juejin.cn/post/6844903885488783374"},{text:"GitHub选择题",link:"https://github.com/lydiahallie/javascript-questions"},{text:"高频前端汇总",link:"https://juejin.cn/post/6940945178899251230"},{text:"牛客前端面试",link:"https://www.nowcoder.com/tutorial/96/f5212664ab664984882b00635066ded2"}]},{text:"学校",iconClass:"aurora-navbar-si-glyph-emoticon",children:[{text:"VPN",link:"https://nic.ecut.edu.cn/f9/d1/c4905a63953/page.htm"},{text:"学习通",link:"http://passport2.chaoxing.com/login?fid=&newversion=true&refer=http%3A%2F%2Fi.chaoxing.com"}]},{text:"About",link:"/about",iconClass:"aurora-navbar-a-ziyuan107"},{text:"Tag",link:"/tag",iconClass:"aurora-navbar-hua2"},{text:"Time",link:"/archive",iconClass:"aurora-navbar-shoulijindu-xuanzhong"},{text:"Photos",link:"/photo",iconClass:"aurora-navbar-si-glyph-egg"},{text:"Mood",iconClass:"aurora-navbar-si-glyph-game-1",children:[{text:"chat",children:[{text:"mood",link:"/mood"},{text:"注册",link:"/aurora-register"}]}]},{text:"IEWGANFIL",link:"https://github.com/iewganfil",iconClass:"aurora-navbar-github-circle"}],darkMode:!1,repo:"https://github.com/iewganfil/blog",repoIconClass:"IEWGANFIL",docsRepo:"https://github.com/iewganfil",githubActions:!0,docsBranch:"main",repoLabel:"IEWGANFIL",editLink:!1,editLinkText:"edit",lastUpdated:!0,lastUpdatedText:"lastTime",logoColor:"#2c3e50",showFont:"李",heroImg:"/avatar.jpg",logo:"/avatar.jpg",lazyLoadingImg:"https://ooszy.cco.vin/img/blog-public/ljz.gif",homePageLazyLoadingImg:"https://ooszy.cco.vin/img/blog-public/ljz.gif",customRandomSay:!1,customRandomValue:"Vuepress-theme-Aurora",socials:[{aHref:"tencent://message/?uin=1519467168",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-qq"},{aHref:"https://github.com/iewgnafil",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-github-fill"},{aHref:"https://juejin.cn/user/1082363860234023",isHome:!0,show:!0,symbol:"#icon-juejin",sidebar:!0},{aHref:"https://space.bilibili.com/443173945",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-bilibili-1"},{aHref:"https://music.163.com/#/user/home?id=1890980793",isHome:!0,show:!0,symbol:"#icon-wangyiyunyinle",sidebar:!0},{aHref:"mailto:1519467168@qq.com",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-email"}],logoTitle:"IEWGANFIL",headTitle:"this is headTitle",description:"IEWGANFIL 学习网站",keyword:"vuepress主题,vuepress theme,生活琐事,简约博客,博客主题,静态主题",slideTime:3e5,randomSaw:"https://international.v1.hitokoto.cn/?c=b&max_length=45",about:[{bar:!1,title:"我?",describe:["目前是一名大三学生","偶尔动态、偶尔存在、不善社交","把节奏放慢，生活也是，爱情例外","遇到不好的事情，酌情处理，适当过滤","你所见即我，好与坏都不重要","门庭冷落，来这需诚","不能与你感同身受但能做你的最佳听众","会心动、会难过、会感动、会生气、想好好生活","一个能力很小欲望很大的普通人☔"],tag:["coding","电影","音乐","懒"],showTag:!0},{bar:!1,title:"大三规划",describe:["做项目","想找实习","复习数据结构","做点什么有意义的事"],tag:["大家加油呀`Σ(￣□￣||)` ..."],showTag:!0},{bar:!1,title:"未来规划",describe:["前端工程师","赚money"],tag:["忘记过去，展望未来"],showTag:!0},{bar:!0,title:"技  能",describe:[{name:"java",score:20},{name:"HTML5",score:60},{name:"javascript",score:60},{name:"css",score:60},{name:"mysql",score:20},{name:"vue",score:60},{name:"spring",score:0},{name:"springMVC",score:0},{name:"springBoot",score:0}],showTag:!1},{showTag:!1,bar:!0,title:"掌握框架",describe:[{name:"spring",score:0},{name:"springMVC",score:0},{name:"springBoot",score:0},{name:"vue",score:60}]},{bar:!0,showTag:!1,title:"掌握技能",describe:[{name:"linux",score:0},{name:"git",score:50},{name:"Ctrl C V",score:100}]}],randomSawQuery:"hitokoto",method:"get",randomColor:["#54b8f7"],maxFontColorArr:8,fontColor:["#2c3e50","#42a5f5","#8093f1","#FF6EC7","#FF7F00","#8FBC8F","#EAADEA","#3299CC","#CDCDCD","#CC3299","#FF7F00","#2F4F4F"],friendLinks:[{title:"我的朋友",links:[{title:"IEWGANFIL",url:"http://8.134.129.78/",logo:"https://s2.loli.net/2022/01/21/KYjOrXUu3SAWlga.jpg",describe:"人生若只是初见,何事秋风悲画扇",cover:"https://s2.loli.net/2022/01/24/RxMbWdsieDP9I8c.png"},{title:"小鱼想买718",url:"http://112.124.32.18:99/",logo:"http://112.124.32.18:99/img/1.jpg",describe:"不会辜负她和梦想的男人",cover:"https://s2.loli.net/2022/01/24/i3F5VRHSBszMNLY.png"}]}],fontFamily:["-apple-system","hlt","tzt","sst","lf","xsf","lsf","cgt"],footer:["Copyright © by IEWGANFIL All Rights Reserved."],isShowFooter:!0,isShowThemeCopyright:!1,isShowRunTime:!0,startRunTime:"1/19/2022 12:22:00",prefixRuntime:"IEW已运行",message:["STUDY CODING","⭐⭐⭐⭐⭐"],recommendPageLength:30,recommendNoTitle:"`╮(￣▽￣)╭`",tagNoTitle:"暂时还没有标题哟",mood:"IEWGANFIL",isFitter:!0,defaultBorderRadius:10,defaultOpacity:1,isHomePageFollow:!0,defaultBlur:1,split:"~",comment:{showComment:!0,serverURL:"https://blog-message-8xz9uhokh-iewgnafil.vercel.app/",emojis:["https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/alus","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/tieba","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo"],avatar:"monsterid"},poster:{description:"CODING",author:"IEWGANFIL",preBlog:"IFL",suffixBlog:" CODING",avatar:"https://s2.loli.net/2022/01/21/KYjOrXUu3SAWlga.jpg"},showOnlineMood:!0,showMoodEdit:!1,addMood:{siteName:"localhost:8080",appId:"q4LlYVTTk2r39sNrJr7BL9A6p",appKey:"VxezWTppppyX2LTx4TUK8w6e2"},customTopImg:{custom:!0,page:["/bg/3.JPG"],friend:["/bg/3.jpg"],tag:["/bg/3.jpg"],mood:["/bg/3.jpg"]},homeWps:["https://s2.loli.net/2022/01/23/9jwh2F7yQWoc3Tz.jpg"],homeWpsMobile:["/bg/4.jpg"],pageSize:3,githubUrl:"https://github.com/iewgnafil",latestPageSize:6,showHomePageImg:!1,sidebarCatalogLevel:1,homePageImgApi:"",mobileCutText:"IEWGANFIL",sidebarTag:"categories",showAddMood:!0,postImgApi:"https://picture.cco.vin/pic/rmimg?type=bing",articleH2Icon:"⭐",articleH3Icon:"🐳",articleH4Icon:"⛄",sidebarAvatar:"/avatar.jpg",sugCountPerMin:300,showRecommend:!1,articlePagination:!0,global:{sidebar:{showStatus:!0,perData:!1,social:!1,friendLink:!0,navbar:!1,latestPage:!0,message:!1,tag:!0,siteData:!1},footer:!1},excludePath:["/footer.html","/v1.3.0/","/plugin/","/node.html","/style.html"],categoriesIncludeFolderName:!0,wave:{showWave:!0},bubble:{show:!0,bubbleNumber:.14,bubbleAlpha:.6,alphaChangeSpeed:1e-5,size:.4,sizeChangeSpeed:2e-4,riseSpeed:.4,color:"255,255,255"},leanCloud:{appId:"2A2Dyd2AffrnldhwftlEddVn-MdYXbMMI",appKey:"qHYTbb91iOPLelyC9lpbXxLH",masterKey:"eUwfvS3luIPnPiHS5SpEhDYr"},showPageMeta:!0,randomSayApi:{method:"GET",urlApi:"https://v1.hitokoto.cn/?encode=text&c=a"},homeTopText:"Top",sidebarDesc:"COGING、STUDY",locales:{"/":{selectLanguageName:"English"}},selectLanguageText:"Languages",selectLanguageAriaLabel:"Select language",sidebar:"auto",sidebarDepth:2,contributors:!0,contributorsText:"Contributors",notFound:["There's nothing here.","How did we get here?","That's a Four-Oh-Four.","Looks like we've got some broken links."],backToHome:"Take me home",openInNewWindow:"open in new window"}},4125:(n,a,s)=>{s.d(a,{Z:()=>e});const e=[{data:{key:"v-245bbacd",path:"/how-to-write-article.html",title:"JavaScript数据类型的相关问题看这篇文章就够了",lang:"zh-CN",frontmatter:{date:"2022/1/20 10:08",coverUrl:"https://pic1.zhimg.com/80/v2-904505bcf0c424788f6028b8952aa2e7_1440w.jpg?source=1940ef5c",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"JavaScript 数据类型种类、存储方式、判断方法",title:"JavaScript数据类型的相关问题看这篇文章就够了",tag:["笔记"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"了解强、弱类型和动态、静态类型语言",slug:"了解强、弱类型和动态、静态类型语言",children:[{level:3,title:"强类型",slug:"强类型",children:[]},{level:3,title:"弱类型",slug:"弱类型",children:[]},{level:3,title:"静态类型",slug:"静态类型",children:[]},{level:3,title:"动态类型",slug:"动态类型",children:[]}]},{level:2,title:"基本数据类型",slug:"基本数据类型",children:[]},{level:2,title:"引用数据类型",slug:"引用数据类型",children:[{level:3,title:"引用类型的检索",slug:"引用类型的检索",children:[]}]},{level:2,title:"拓展：深浅拷贝",slug:"拓展-深浅拷贝",children:[{level:3,title:"手写方法实现深拷贝：",slug:"手写方法实现深拷贝",children:[]}]},{level:2,title:"typeof方法",slug:"typeof方法",children:[]},{level:2,title:"拓展：为什么null返回的是一个object呢？",slug:"拓展-为什么null返回的是一个object呢",children:[]},{level:2,title:"instanceof方法",slug:"instanceof方法",children:[]}],git:{updatedTime:1642668034e3,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:1}]}},key:"v-245bbacd",path:"/how-to-write-article.html",title:"JavaScript数据类型的相关问题看这篇文章就够了",lang:"zh-CN",frontmatter:{date:"2022/1/20 10:08",coverUrl:"https://pic1.zhimg.com/80/v2-904505bcf0c424788f6028b8952aa2e7_1440w.jpg?source=1940ef5c",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"JavaScript 数据类型种类、存储方式、判断方法",title:"JavaScript数据类型的相关问题看这篇文章就够了",tag:["笔记"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"了解强、弱类型和动态、静态类型语言",slug:"了解强、弱类型和动态、静态类型语言",children:[{level:3,title:"强类型",slug:"强类型",children:[]},{level:3,title:"弱类型",slug:"弱类型",children:[]},{level:3,title:"静态类型",slug:"静态类型",children:[]},{level:3,title:"动态类型",slug:"动态类型",children:[]}]},{level:2,title:"基本数据类型",slug:"基本数据类型",children:[]},{level:2,title:"引用数据类型",slug:"引用数据类型",children:[{level:3,title:"引用类型的检索",slug:"引用类型的检索",children:[]}]},{level:2,title:"拓展：深浅拷贝",slug:"拓展-深浅拷贝",children:[{level:3,title:"手写方法实现深拷贝：",slug:"手写方法实现深拷贝",children:[]}]},{level:2,title:"typeof方法",slug:"typeof方法",children:[]},{level:2,title:"拓展：为什么null返回的是一个object呢？",slug:"拓展-为什么null返回的是一个object呢",children:[]},{level:2,title:"instanceof方法",slug:"instanceof方法",children:[]}],content:"\r\n\r\n# JavaScript 数据类型\r\n值类型（基本类型）有7种，分别是 \r\n- undefined\r\n- null\r\n- Boolean\r\n- String\r\n- Number\r\n- Symbol(ES6新增)\r\n- BigInt(ES10新增)\r\n\r\n引用类型：\r\n- Object\r\n- Array\r\n- function\r\n- Set\r\n- Map\r\n- WeakMap\r\n- WeakSet\r\n- RegExp\r\n- Date\r\n- Math…\r\n# 拓展：JavaScript 是一种动态弱类型语言。\r\n这意味着相同的变量可用作不同的类型：\r\n\r\n```js\r\nvar x;               // x 为 undefined\r\nvar x = 5;           // 现在 x 为数字\r\nvar x = \"John\";      // 现在 x 为字符串\r\n```\r\n## 了解强、弱类型和动态、静态类型语言\r\n### 强类型\r\n\r\n-   语言层面限制函数的实参类型必须与形参类型相同\r\n-   强类型语言中不允许任意的隐式类型转换\r\n\r\n### 弱类型\r\n\r\n-   弱类型语言层面不会限制实参的类型\r\n-   弱类型语言允许任意的数据隐式类型转换\r\n\r\n### 静态类型\r\n\r\n一个变量声明时它的类型就是明确的，声明过后它的类型不再允许修改\r\n\r\n### 动态类型\r\n\r\n- 运行阶段才能够明确变量类型，变量的类型随时可以改变\r\n\r\n- 动态类型语言中的变量没有类型，变量中存放的值才有类型\r\n# 基本数据类型和引用数据类型的存储方式：\r\n## 基本数据类型\r\n基本数据类型存储在**栈内存**，存储的是**值**。\r\n> 原始类型存储的都是值，是没有函数可以调用的。\r\n## 引用数据类型\r\n引用数据类型的值存储在**堆内存**，**地址指针**（该指针指向堆中的该实体）存储在栈内存。\r\n> 之所以引用数据类型存储在堆内存中，是因为引用数据类型占据空间大、占用内存不固定。 如果存储在栈中，将会影响程序运行的性能。\r\n### 引用类型的检索\r\n当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体；所以当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。上述的赋值行为发生**浅拷贝**：拷贝的是栈中的内存地址，所以如果其中一个对象改变了这个地址里的值，就会影响到另一个对象。\r\n## 拓展：深浅拷贝\r\n在JavaScript中，基本类型 值的复制是直接拷贝一份新的一模一样的数据，这两份数据相互独立，互不影响。而引用类型值的复制则为传递对象的引用，则需要考虑深浅拷贝的问题。\r\n\r\n-   深拷贝：创建一个新的对象，将一个对象从内存中**完整地拷贝**出来一份给该新对象，并从**堆内存中开辟一个全新的空间存放新对象**，且新对象的修改并不会改变原对象。\r\n\r\n```js\r\nlet arr = [1, 2, 3, 4, 5]\r\nlet arr2 =JSON.parse(JSON.stringify(arr))       \r\n// arr.slice()    // [...arr]     //[].concat(arr)    皆可实现数组的深拷贝\r\n// JSON.parse(JSON.stringify(arr))  先将arr变成字符串  然后再将arr变成对象\r\n\r\narr[0] = 0\r\nconsole.log(arr2);      // [1, 2, 3, 4, 5]\r\n```\r\n\r\n-   浅拷贝：创建一个新的对象，来接收你要拷贝的对象的值，复制的是**栈内存中存放的的地址**，所以两者指向的**仍然是堆里的同一个对象**，所以如果其中一个对象改变了栈内存中存放的地址所指向的对象，就会影响到另一个对象。\r\n\r\n```js\r\nlet c = {name:'小明', age: 18}\r\nlet d = c\r\nc.age = 19\r\nconsole.log(d);   // { name: '小明', age: 19 }\r\n```\r\n\r\n### 手写方法实现深拷贝：\r\n\r\n```js\r\nlet person = {\r\n    name: '小明',\r\n    age: 18,\r\n    like: {\r\n        sport: 'running',\r\n        food: 'beef'\r\n    }\r\n}\r\n\r\nfunction deepCopy(obj) {\r\n    let n = obj instanceof Array ? [] : {}     // 判断是否为Array  来判断创建n的数据类型\r\n    for (let item in obj) {\r\n        if (obj.hasOwnProperty(item)) {     // 判断是自己的  还是原型上继承下来的\r\n            n[item] = obj[item] instanceof Object ? deepCopy(obj[item]) : obj[item]    \r\n            // 判断item是否还是对象或数组\r\n        }\r\n    }\r\n    return n\r\n}\r\n\r\nlet newPerson = deepCopy(person)\r\nperson.like.sport = 'swimming'\r\nconsole.log(newPerson);     // { name: '小明', age: 18, like: { sport: 'running', food: 'beef' } }\r\nconsole.log(person);       // { name: '小明', age: 18, like: { sport: 'swimming', food: 'beef' } }\r\n\r\n```\r\n\r\n\r\n\r\n# 判断数据类型的方法\r\n## typeof方法\r\n可以通过typeof检测基本类型和引用类型，不过检测出来的引用类型都是对象：\r\n\r\n```js\r\nconsole.log(\r\n    typeof 123,     //number\r\n    typeof 'abc',   //string\r\n    typeof false,   //boolean\r\n    typeof undefined, //undefined\r\n    typeof null, //object\r\n    typeof function(){console.log('aaa');}, // function\r\n    typeof new Date(), //object\r\n    typeof [1,2,3], //object\r\n    typeof {a:1,b:2,c:3}   //object\r\n);\r\n```\r\n首先 **typeof** 能够正确的判断基本数据类型，但除了null, **typeof null所输出的为object**。\r\n但是对于对象来说，`typeof`也不能正确的判断其类型， 如`typeof`一个函数可以输出 `function`,而除此之外，输出的全是` object`,这种情况下，我们无法准确的知道对象的类型。\r\n## 拓展：为什么null返回的是一个object呢？\r\njs 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息\r\n-   000：对象\r\n-   010：浮点数\r\n-   100：字符串\r\n-   110：布尔\r\n-   1：整数\r\n在JS的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 `null` 表示为全零，所以typeof错误的将它判断为 `object` 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。\r\n\r\n#### null 和 undefined 的区别：\r\n- `null` 是 javascript 的关键字，表示一个特殊值，常用来描述\"空值\"，typeof 运算返回\"object\"。\r\n- `undefined` 是预定义的全局变量，他的值就是\"未定义\"， typeof 运算返回 \"undefined\"\r\n- `undefined` 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。\r\n- 相对来说，null更接近其他语言的空、而undefined则是js特有的机制\r\n## instanceof方法\r\n由上可知`typeof`来判断引用类型是不准确的，故想要检测引用类型可以通过 **instanceof**\r\n\r\n    语法：object instanceof constructor（object为实例对象，constructor为构造函数）\r\n    \r\n关于**instanceof** 的实现原理的理解，可参考下面的代码：\r\n\r\n```js\r\nfunction instance_of (left, right){\r\n    let leftVal = left.__proto__\r\n    let rightVal = right.prototype\r\n    while(true){\r\n        if(leftVal === null) return false\r\n        if(leftVal === rightVal)  return true\r\n        leftVal = leftVal.__proto__\r\n    }\r\n}\r\nlet a = [1, 2, 3]\r\nconsole.log(instance_of(a,Array));    // true\r\n```\r\n由此可知`instanceof`是顺着**原型链**去找，直到找到相同的原型对象，返回true，否则为false。\r\n\r\n**instanceof**可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型\r\n\r\n",contentRendered:'<h1 id="javascript-数据类型" tabindex="-1"><a class="header-anchor" href="#javascript-数据类型" aria-hidden="true">#</a> JavaScript 数据类型</h1>\n<p>值类型（基本类型）有7种，分别是</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Symbol(ES6新增)</li>\n<li>BigInt(ES10新增)</li>\n</ul>\n<p>引用类型：</p>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>function</li>\n<li>Set</li>\n<li>Map</li>\n<li>WeakMap</li>\n<li>WeakSet</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Math…</li>\n</ul>\n<h1 id="拓展-javascript-是一种动态弱类型语言。" tabindex="-1"><a class="header-anchor" href="#拓展-javascript-是一种动态弱类型语言。" aria-hidden="true">#</a> 拓展：JavaScript 是一种动态弱类型语言。</h1>\n<p>这意味着相同的变量可用作不同的类型：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> x<span class="token punctuation">;</span>               <span class="token comment">// x 为 undefined</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>           <span class="token comment">// 现在 x 为数字</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>      <span class="token comment">// 现在 x 为字符串</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="了解强、弱类型和动态、静态类型语言" tabindex="-1"><a class="header-anchor" href="#了解强、弱类型和动态、静态类型语言" aria-hidden="true">#</a> 了解强、弱类型和动态、静态类型语言</h2>\n<h3 id="强类型" tabindex="-1"><a class="header-anchor" href="#强类型" aria-hidden="true">#</a> 强类型</h3>\n<ul>\n<li>语言层面限制函数的实参类型必须与形参类型相同</li>\n<li>强类型语言中不允许任意的隐式类型转换</li>\n</ul>\n<h3 id="弱类型" tabindex="-1"><a class="header-anchor" href="#弱类型" aria-hidden="true">#</a> 弱类型</h3>\n<ul>\n<li>弱类型语言层面不会限制实参的类型</li>\n<li>弱类型语言允许任意的数据隐式类型转换</li>\n</ul>\n<h3 id="静态类型" tabindex="-1"><a class="header-anchor" href="#静态类型" aria-hidden="true">#</a> 静态类型</h3>\n<p>一个变量声明时它的类型就是明确的，声明过后它的类型不再允许修改</p>\n<h3 id="动态类型" tabindex="-1"><a class="header-anchor" href="#动态类型" aria-hidden="true">#</a> 动态类型</h3>\n<ul>\n<li>\n<p>运行阶段才能够明确变量类型，变量的类型随时可以改变</p>\n</li>\n<li>\n<p>动态类型语言中的变量没有类型，变量中存放的值才有类型</p>\n</li>\n</ul>\n<h1 id="基本数据类型和引用数据类型的存储方式" tabindex="-1"><a class="header-anchor" href="#基本数据类型和引用数据类型的存储方式" aria-hidden="true">#</a> 基本数据类型和引用数据类型的存储方式：</h1>\n<h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2>\n<p>基本数据类型存储在<strong>栈内存</strong>，存储的是<strong>值</strong>。</p>\n<blockquote>\n<p>原始类型存储的都是值，是没有函数可以调用的。</p>\n</blockquote>\n<h2 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h2>\n<p>引用数据类型的值存储在<strong>堆内存</strong>，<strong>地址指针</strong>（该指针指向堆中的该实体）存储在栈内存。</p>\n<blockquote>\n<p>之所以引用数据类型存储在堆内存中，是因为引用数据类型占据空间大、占用内存不固定。 如果存储在栈中，将会影响程序运行的性能。</p>\n</blockquote>\n<h3 id="引用类型的检索" tabindex="-1"><a class="header-anchor" href="#引用类型的检索" aria-hidden="true">#</a> 引用类型的检索</h3>\n<p>当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体；所以当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。上述的赋值行为发生<strong>浅拷贝</strong>：拷贝的是栈中的内存地址，所以如果其中一个对象改变了这个地址里的值，就会影响到另一个对象。</p>\n<h2 id="拓展-深浅拷贝" tabindex="-1"><a class="header-anchor" href="#拓展-深浅拷贝" aria-hidden="true">#</a> 拓展：深浅拷贝</h2>\n<p>在JavaScript中，基本类型 值的复制是直接拷贝一份新的一模一样的数据，这两份数据相互独立，互不影响。而引用类型值的复制则为传递对象的引用，则需要考虑深浅拷贝的问题。</p>\n<ul>\n<li>深拷贝：创建一个新的对象，将一个对象从内存中<strong>完整地拷贝</strong>出来一份给该新对象，并从<strong>堆内存中开辟一个全新的空间存放新对象</strong>，且新对象的修改并不会改变原对象。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>       \n<span class="token comment">// arr.slice()    // [...arr]     //[].concat(arr)    皆可实现数组的深拷贝</span>\n<span class="token comment">// JSON.parse(JSON.stringify(arr))  先将arr变成字符串  然后再将arr变成对象</span>\n\narr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul>\n<li>浅拷贝：创建一个新的对象，来接收你要拷贝的对象的值，复制的是<strong>栈内存中存放的的地址</strong>，所以两者指向的<strong>仍然是堆里的同一个对象</strong>，所以如果其中一个对象改变了栈内存中存放的地址所指向的对象，就会影响到另一个对象。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'小明\'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> d <span class="token operator">=</span> c\nc<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// { name: \'小明\', age: 19 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="手写方法实现深拷贝" tabindex="-1"><a class="header-anchor" href="#手写方法实现深拷贝" aria-hidden="true">#</a> 手写方法实现深拷贝：</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'小明\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">like</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">sport</span><span class="token operator">:</span> <span class="token string">\'running\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">food</span><span class="token operator">:</span> <span class="token string">\'beef\'</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> n <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// 判断是否为Array  来判断创建n的数据类型</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 判断是自己的  还是原型上继承下来的</span>\n            n<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span>    \n            <span class="token comment">// 判断item是否还是对象或数组</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> newPerson <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>\nperson<span class="token punctuation">.</span>like<span class="token punctuation">.</span>sport <span class="token operator">=</span> <span class="token string">\'swimming\'</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// { name: \'小明\', age: 18, like: { sport: \'running\', food: \'beef\' } }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// { name: \'小明\', age: 18, like: { sport: \'swimming\', food: \'beef\' } }</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h1 id="判断数据类型的方法" tabindex="-1"><a class="header-anchor" href="#判断数据类型的方法" aria-hidden="true">#</a> 判断数据类型的方法</h1>\n<h2 id="typeof方法" tabindex="-1"><a class="header-anchor" href="#typeof方法" aria-hidden="true">#</a> typeof方法</h2>\n<p>可以通过typeof检测基本类型和引用类型，不过检测出来的引用类型都是对象：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">,</span>     <span class="token comment">//number</span>\n    <span class="token keyword">typeof</span> <span class="token string">\'abc\'</span><span class="token punctuation">,</span>   <span class="token comment">//string</span>\n    <span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment">//boolean</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">//undefined</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">//object</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'aaa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// function</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//object</span>\n    <span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//object</span>\n    <span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span>   <span class="token comment">//object</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>首先 <strong>typeof</strong> 能够正确的判断基本数据类型，但除了null, <strong>typeof null所输出的为object</strong>。\n但是对于对象来说，<code>typeof</code>也不能正确的判断其类型， 如<code>typeof</code>一个函数可以输出 <code>function</code>,而除此之外，输出的全是<code> object</code>,这种情况下，我们无法准确的知道对象的类型。</p>\n<h2 id="拓展-为什么null返回的是一个object呢" tabindex="-1"><a class="header-anchor" href="#拓展-为什么null返回的是一个object呢" aria-hidden="true">#</a> 拓展：为什么null返回的是一个object呢？</h2>\n<p>js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息</p>\n<ul>\n<li>000：对象</li>\n<li>010：浮点数</li>\n<li>100：字符串</li>\n<li>110：布尔</li>\n<li>1：整数\n在JS的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 <code>null</code> 表示为全零，所以typeof错误的将它判断为 <code>object</code> 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</li>\n</ul>\n<h4 id="null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-的区别" aria-hidden="true">#</a> null 和 undefined 的区别：</h4>\n<ul>\n<li><code>null</code> 是 javascript 的关键字，表示一个特殊值，常用来描述&quot;空值&quot;，typeof 运算返回&quot;object&quot;。</li>\n<li><code>undefined</code> 是预定义的全局变量，他的值就是&quot;未定义&quot;， typeof 运算返回 &quot;undefined&quot;</li>\n<li><code>undefined</code> 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。</li>\n<li>相对来说，null更接近其他语言的空、而undefined则是js特有的机制</li>\n</ul>\n<h2 id="instanceof方法" tabindex="-1"><a class="header-anchor" href="#instanceof方法" aria-hidden="true">#</a> instanceof方法</h2>\n<p>由上可知<code>typeof</code>来判断引用类型是不准确的，故想要检测引用类型可以通过 <strong>instanceof</strong></p>\n<pre><code>语法：object instanceof constructor（object为实例对象，constructor为构造函数）\n</code></pre>\n<p>关于<strong>instanceof</strong> 的实现原理的理解，可参考下面的代码：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">instance_of</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> leftVal <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__\n    <span class="token keyword">let</span> rightVal <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>leftVal <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>leftVal <span class="token operator">===</span> rightVal<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span>\n        leftVal <span class="token operator">=</span> leftVal<span class="token punctuation">.</span>__proto__\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">instance_of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>Array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>由此可知<code>instanceof</code>是顺着<strong>原型链</strong>去找，直到找到相同的原型对象，返回true，否则为false。</p>\n<p><strong>instanceof</strong>可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/how-to-write-article.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"how-to-write-article",filePath:"C:/Users/mi/Desktop/我的博客/docs/how-to-write-article.md",filePathRelative:"how-to-write-article.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/how-to-write-article.html.vue",componentFilePathRelative:"pages/how-to-write-article.html.vue",componentFileChunkName:"v-245bbacd",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/how-to-write-article.html.js",dataFilePathRelative:"pages/how-to-write-article.html.js",dataFileChunkName:"v-245bbacd",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/how-to-write-article.html",htmlFilePathRelative:"how-to-write-article.html"},{data:{key:"v-7ffc659c",path:"/study/study1.html",title:"扁平化",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202112/4df6635c747bc083c7f159628e545666--2426815410.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"数组扁平化且删除重复数据",title:"扁平化",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"实现方法",slug:"实现方法",children:[{level:3,title:"扩展：手写flat",slug:"扩展-手写flat",children:[]}]}],git:{updatedTime:1642771259e3,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:2}]}},key:"v-7ffc659c",path:"/study/study1.html",title:"扁平化",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202112/4df6635c747bc083c7f159628e545666--2426815410.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"数组扁平化且删除重复数据",title:"扁平化",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"实现方法",slug:"实现方法",children:[{level:3,title:"扩展：手写flat",slug:"扩展-手写flat",children:[]}]}],content:"\r\n# 题目示例：\r\n已知如下数组：\r\n\r\n\r\n```js\r\nvar arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];\r\n```\r\n编写一个程序将数组扁平化并去除其中重复部分数据，最终得到一个升序且不重复的数组。\r\n## 实现方法\r\n\r\n```js\r\nArray.from(new Set(arr.flat(`Infinity`))).sort((a,b)=>{ return a-b})\r\n```\r\n- ` flat()  ` 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。`flat`的语法：\r\n> var newArray = arr.flat([depth])\\\r\n> `depth` 指定要提取嵌套数组的结构深度，默认值为 1。\r\n- 全局属性 `Infinity` 是一个数值，表示无穷大。\r\n- `Set`中的元素只会**出现一次**，即 Set 中的元素是唯一的。\r\n- ` Array.from()  ` 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\r\n- ` sort()  ` 对数组的元素进行排序，并返回数组。\r\n### 扩展：手写flat\r\n此处仅列举几种简单易懂的方法：\\\r\n\\\r\n`instanceof`递归实现：\r\n```js\r\nfunction myflat1(arr){\r\n    let res = []\r\n    function bp(arr)  {\r\n        let len = arr.length\r\n        for(let i = 0;i < len; i++){\r\n            if( arr[i] instanceof Array){     // 判断该元素是否为数组\r\n                let a = [...arr[i]]           // 如果是数组  对其进行结构  再进行递归\r\n                bp(a)\r\n            }else{\r\n                res.push(arr[i])            // 元素不为数组时 push到res数组里\r\n            }\r\n        }\r\n    }\r\n    bp(arr)\r\n    return res\r\n}\r\n```\r\n转字符串切割：\r\n\r\n```js\r\nfunction myflat2(arr){\r\n    arr = arr.toString()         // 将数组进行字符串转换\r\n    arr = arr.split(',')         // split()方法将字符串进行分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。 \r\n    for(let i = 0,len = arr.length;i < len; i++){ \r\n        arr[i] = Number(arr[i])  // 将字符串数组的元素转换成Number类型\r\n    }\r\n    return arr\r\n}\r\n```\r\n基于`Array.isArray`的`while`循环\r\n\r\n```js\r\nfunction myflat3(arr) {\r\n    while (arr.some(Array.isArray)) {     \r\n        // Array.isArray() 用于确定传递的值是否是一个Array  \r\n        //some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试\r\n        arr = [].concat(...arr)  \r\n    }\r\n    return arr\r\n}\r\n```",contentRendered:'<h1 id="题目示例" tabindex="-1"><a class="header-anchor" href="#题目示例" aria-hidden="true">#</a> 题目示例：</h1>\n<p>已知如下数组：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>编写一个程序将数组扁平化并去除其中重复部分数据，最终得到一个升序且不重复的数组。</p>\n<h2 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法" aria-hidden="true">#</a> 实现方法</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Infinity</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul>\n<li><code>flat() </code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。<code>flat</code>的语法：</li>\n</ul>\n<blockquote>\n<p>var newArray = arr.flat([depth])<br>\n<code>depth</code> 指定要提取嵌套数组的结构深度，默认值为 1。</p>\n</blockquote>\n<ul>\n<li>全局属性 <code>Infinity</code> 是一个数值，表示无穷大。</li>\n<li><code>Set</code>中的元素只会<strong>出现一次</strong>，即 Set 中的元素是唯一的。</li>\n<li><code>Array.from() </code> 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</li>\n<li><code>sort() </code> 对数组的元素进行排序，并返回数组。</li>\n</ul>\n<h3 id="扩展-手写flat" tabindex="-1"><a class="header-anchor" href="#扩展-手写flat" aria-hidden="true">#</a> 扩展：手写flat</h3>\n<p>此处仅列举几种简单易懂的方法：<br>\n<br>\n<code>instanceof</code>递归实现：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myflat1</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">function</span> <span class="token function">bp</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 判断该元素是否为数组</span>\n                <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>           <span class="token comment">// 如果是数组  对其进行结构  再进行递归</span>\n                <span class="token function">bp</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment">// 元素不为数组时 push到res数组里</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">bp</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>转字符串切割：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myflat2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// 将数组进行字符串转换</span>\n    arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span>         <span class="token comment">// split()方法将字符串进行分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。 </span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 将字符串数组的元素转换成Number类型</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>基于<code>Array.isArray</code>的<code>while</code>循环</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myflat3</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     \n        <span class="token comment">// Array.isArray() 用于确定传递的值是否是一个Array  </span>\n        <span class="token comment">//some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试</span>\n        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>  \n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study1",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study1.md",filePathRelative:"study/study1.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study1.html.vue",componentFilePathRelative:"pages/study/study1.html.vue",componentFileChunkName:"v-7ffc659c",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study1.html.js",dataFilePathRelative:"pages/study/study1.html.js",dataFileChunkName:"v-7ffc659c",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study1.html",htmlFilePathRelative:"study/study1.html"},{data:{key:"v-7c92b45e",path:"/study/study2.html",title:"防抖和节流",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"https://www.toopic.cn/public/uploads/small/1634265816194163426581671.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"什么是防抖和节流？有什么区别？如何实现？",title:"防抖和节流",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[],git:{updatedTime:16427402e5,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:1}]}},key:"v-7c92b45e",path:"/study/study2.html",title:"防抖和节流",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"https://www.toopic.cn/public/uploads/small/1634265816194163426581671.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"什么是防抖和节流？有什么区别？如何实现？",title:"防抖和节流",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[],content:"\r\n1.  **防抖**\r\n\r\n> 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间\r\n\r\n-   思路：\r\n\r\n> 每次触发事件时都取消之前的延时调用方法\r\n\r\n```js\r\nfunction debounce(fn,delay) {\r\n      let timeout = null; // 创建一个标记用来存放定时器的返回值\r\n      return function () {\r\n        clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\r\n        timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\r\n          fn.apply(this, arguments);  //加了apply，此时this为debounce的\r\n        }, delay);     // delay为事件触发时间间隔\r\n      };\r\n    }\r\n```\r\n2.  **节流**\r\n\r\n> 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率\r\n\r\n-   思路：\r\n\r\n> 每次触发事件时都判断与前一次执行是否间隔事件大于n秒\r\n\r\n```js\r\nfunction throttle(fn, delay){\r\n    let time = 0\r\n    return function(){\r\n        let now = Date.now();     // 每次点击都记录此时的时间戳\r\n        //console.log(now);\r\n        if(now - time >= delay){ //点击时的时间相比较前一次点击  至少要相差delay时间  否则不执行\r\n            fn.apply(this,arguments) //加了apply，此时this为throttle的 \r\n        }\r\n        time = Date.now()     // 触发事件之后，更新此时的时间，用于下一次的判断\r\n    }\r\n}\r\n```",contentRendered:'<ol>\n<li><strong>防抖</strong></li>\n</ol>\n<blockquote>\n<p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p>\n</blockquote>\n<ul>\n<li>思路：</li>\n</ul>\n<blockquote>\n<p>每次触发事件时都取消之前的延时调用方法</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个标记用来存放定时器的返回值</span>\n      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每当用户输入的时候把前一个 setTimeout clear 掉</span>\n        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span>\n          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加了apply，此时this为debounce的</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// delay为事件触发时间间隔</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="2">\n<li><strong>节流</strong></li>\n</ol>\n<blockquote>\n<p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p>\n</blockquote>\n<ul>\n<li>思路：</li>\n</ul>\n<blockquote>\n<p>每次触发事件时都判断与前一次执行是否间隔事件大于n秒</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 每次点击都记录此时的时间戳</span>\n        <span class="token comment">//console.log(now);</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> time <span class="token operator">>=</span> delay<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//点击时的时间相比较前一次点击  至少要相差delay时间  否则不执行</span>\n            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span> <span class="token comment">//加了apply，此时this为throttle的 </span>\n        <span class="token punctuation">}</span>\n        time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 触发事件之后，更新此时的时间，用于下一次的判断</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study2.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study2",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study2.md",filePathRelative:"study/study2.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study2.html.vue",componentFilePathRelative:"pages/study/study2.html.vue",componentFileChunkName:"v-7c92b45e",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study2.html.js",dataFilePathRelative:"pages/study/study2.html.js",dataFileChunkName:"v-7c92b45e",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study2.html",htmlFilePathRelative:"study/study2.html"},{data:{key:"v-79290320",path:"/study/study3.html",title:"输出什么",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202109/ac3990b3d19dd512dd6f6a364e70848a--1897315302.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"输出什么",title:"输出什么",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:3,title:"map",slug:"map",children:[]},{level:3,title:"parseInt",slug:"parseint",children:[]},{level:3,title:"回到真实的事例上",slug:"回到真实的事例上",children:[]}],git:{updatedTime:16427402e5,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:1}]}},key:"v-79290320",path:"/study/study3.html",title:"输出什么",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202109/ac3990b3d19dd512dd6f6a364e70848a--1897315302.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"输出什么",title:"输出什么",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:3,title:"map",slug:"map",children:[]},{level:3,title:"parseInt",slug:"parseint",children:[]},{level:3,title:"回到真实的事例上",slug:"回到真实的事例上",children:[]}],content:"\r\n### map\r\n`map()` 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\r\n\r\n\r\n```js\r\nvar new_array = arr.map(function callback(currentValue[,index[, array]]) {\r\n // Return element for new_array\r\n }[, thisArg])\r\n```\r\n可以看到`callback`回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。\\\r\n`currentValue` 是callback 数组中正在处理的当前元素。\\\r\n`index`可选, 是callback 数组中正在处理的当前元素的索引。\\\r\n`array`可选, 是callback map 方法被调用的数组。\\\r\n另外还有`thisArg`可选, 执行 callback 函数时使用的this 值。\r\n\r\n```js\r\nconst arr = [1, 2, 3];\r\narr.map((num) => num + 1); // [2, 3, 4]\r\n```\r\n### parseInt\r\n`parseInt()` 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。\r\n\r\n```js\r\nconst intValue = parseInt(string[, radix]);\r\n```\r\n`string` 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。\r\n\r\n`radix` 一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。默认为10。\\\r\n`返回值` 返回一个整数或NaN\r\n\r\n```js\r\nparseInt(100); // 100\r\nparseInt(100, 10); // 100\r\nparseInt(100, 2); // 4 -> 将100视为2进制下的显示  则为4\r\n```\r\n\r\n### 回到真实的事例上\r\n\r\n回到我们真实的事例上\r\n\r\n```js\r\n['1', '2', '3'].map(parseInt)\r\n```\r\n对于每个迭代`map`, `parseInt()`传递两个参数: **字符串和基数**。\\\r\n所以实际执行的的代码是：\r\n\r\n```js\r\n['1', '2', '3'].map((item, index) => {\r\n\treturn parseInt(item, index)\r\n})\r\n```\r\n即返回的值分别为：\r\n\r\n```js\r\nparseInt('1', 0) // 1\r\nparseInt('2', 1) // NaN\r\nparseInt('3', 2) // NaN, 3 不是二进制\r\n```\r\n所以：\r\n\r\n```js\r\n['1', '2', '3'].map(parseInt)\r\n// 1, NaN, NaN\r\n```",contentRendered:'<h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3>\n<p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span>index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token comment">// Return element for new_array</span>\n <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到<code>callback</code>回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。<br>\n<code>currentValue</code> 是callback 数组中正在处理的当前元素。<br>\n<code>index</code>可选, 是callback 数组中正在处理的当前元素的索引。<br>\n<code>array</code>可选, 是callback map 方法被调用的数组。<br>\n另外还有<code>thisArg</code>可选, 执行 callback 函数时使用的this 值。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint" aria-hidden="true">#</a> parseInt</h3>\n<p><code>parseInt()</code> 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> intValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">,</span> radix<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>string</code> 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p>\n<p><code>radix</code> 一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。默认为10。<br>\n<code>返回值</code> 返回一个整数或NaN</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 -> 将100视为2进制下的显示  则为4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="回到真实的事例上" tabindex="-1"><a class="header-anchor" href="#回到真实的事例上" aria-hidden="true">#</a> 回到真实的事例上</h3>\n<p>回到我们真实的事例上</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>对于每个迭代<code>map</code>, <code>parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。<br>\n所以实际执行的的代码是：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>即返回的值分别为：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">\'3\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// NaN, 3 不是二进制</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span>\n<span class="token comment">// 1, NaN, NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study3.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study3",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study3.md",filePathRelative:"study/study3.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study3.html.vue",componentFilePathRelative:"pages/study/study3.html.vue",componentFileChunkName:"v-79290320",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study3.html.js",dataFilePathRelative:"pages/study/study3.html.js",dataFileChunkName:"v-79290320",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study3.html",htmlFilePathRelative:"study/study3.html"},{data:{key:"v-75bf51e2",path:"/study/study4.html",title:"跨域",lang:"zh-CN",frontmatter:{date:"2022/1/21 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202201/ec75de816ec1a1e965b9604a936e5c3e--333631415.jpg",sticky:!0,keyword:"跨域,jsonp,cros,postMessage",description:"跨域",title:"跨域",tag:["跨域","面试题"],categories:["跨域"]},excerpt:"",headers:[{level:2,title:"常见的跨域场景",slug:"常见的跨域场景",children:[]},{level:2,title:"特别说明",slug:"特别说明",children:[]},{level:2,title:"跨域的解决方案",slug:"跨域的解决方案",children:[{level:3,title:"1. jsonp",slug:"_1-jsonp",children:[]},{level:3,title:"2. cors",slug:"_2-cors",children:[]},{level:3,title:"3. postMessage",slug:"_3-postmessage",children:[]}]}],git:{updatedTime:1642771259e3,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:2}]}},key:"v-75bf51e2",path:"/study/study4.html",title:"跨域",lang:"zh-CN",frontmatter:{date:"2022/1/21 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202201/ec75de816ec1a1e965b9604a936e5c3e--333631415.jpg",sticky:!0,keyword:"跨域,jsonp,cros,postMessage",description:"跨域",title:"跨域",tag:["跨域","面试题"],categories:["跨域"]},excerpt:"",headers:[{level:2,title:"常见的跨域场景",slug:"常见的跨域场景",children:[]},{level:2,title:"特别说明",slug:"特别说明",children:[]},{level:2,title:"跨域的解决方案",slug:"跨域的解决方案",children:[{level:3,title:"1. jsonp",slug:"_1-jsonp",children:[]},{level:3,title:"2. cors",slug:"_2-cors",children:[]},{level:3,title:"3. postMessage",slug:"_3-postmessage",children:[]}]}],content:'\r\n# 什么是跨域\r\n浏览器都具有同源策略  --- 协议 + 域名 + 端口  都相同\r\n\r\nhttp://   www   .    abc.com  :    8080   /    detail   \\\r\n 协议    子域名       主域名        端口        请求资源地址\r\n\r\n\r\n - 同源策略限制了ajax请求\r\n\r\n - 没有被同源策略所影响的三个标签\r\n ```js\r\n   <img src="xxx> \r\n   <link href="xxx>\r\n   <script src="xxx">\r\n```\r\n   \r\n\r\n## 常见的跨域场景\r\nhttp://www.a.com/a.js   \\\r\nhttp://www.a.com/b.js      同一个域名，允许通信\r\n\r\n\r\nhttp://www.a.com/a.js     \\\r\nhttps://www.a.com/a.js     协议不同，跨域\r\n\r\n\r\nhttp://www.a.com/a.js      \\\r\nhttp://script.a.com/a.js\t 主域相同，子域不相同，跨域\r\n\r\n\r\n## 特别说明\r\n1. 如果是端口和协议照成的跨域，前端是没有办法解决的\r\n2. 跨域仅仅只是根据url的首部 来识别，不会根据这个首部对应得ip地址来判断\r\n3. 跨域并不是请求没有发出去，请求时能发出去得，服务器也是能响应的，只是响应结果被浏览器拦截了\r\n\r\n\r\n## 跨域的解决方案\r\n### 1. jsonp\r\n  原理：**利用script标签上的src属性不会被同源的策略所拦截的这一机制**，将我们要请求的url地址，添加到script的src属性中，且携带上前端全局下的函数名作为参数给到后端，后端获取到前端传递的函数名，然后返回该函数的调用语法，将要返回的数据放在该函数的调用中作为参数，当浏览器接收到全局下的函数被调用的后端响应，会自动执行该函数，从而从参数中获取到后端返回的数据\r\n\r\n  缺点：\r\n  1. 需要对方的服务器做支持才可以\r\n  2. 只支持**get** 请求，有局限性，可能会遭到 **XSS攻击**\r\n\r\n\r\n### 2. cors\r\n  cors是W3C的标准，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求。也就是说浏览器发请求是不会被跨域的，跨域的核心是后端响应不了。\r\n\r\n  >要让后端响应内容能够补被浏览器拦截，关键在于后端。如果后端也能遵从CorS标准的话，后端的响应也可以跨源.\r\n\r\n分为简单请求和复杂请求两种：\r\n  - 简单请求\\\r\n    . 使用GET、POST、HEAD \\\r\n    . Content-Type的值仅限于:**text/plain || multipart/from-data || application/x-www-from-urlencoded**\r\n\r\n  - 复杂请求\\\r\n    .  不满足简单请求的条件的就是复杂请求\\\r\n    .  复杂请求的cors请求，会在正式通信之前，增加一次http查询请求，称为"预检"，预检是用来知道服务端是都允许跨域请求，预检请求发的是options方法\r\n\r\n### 3. postMessage\r\n  html5中的 xhr 提供的API，postMessage()方法允许来自不同源的脚本采用异步的方法进行有限通信，可以实现跨文本，多窗口，跨域消息传递 \\\r\n  可以解决这么几个问题：\r\n  - 页面和其他新的窗口的数据传递\r\n  - 多窗口之间的消息传递\r\n  - 页面与嵌套的iframe消息传递\r\n  - 上面三个场景的跨域数据传递\r\n\r\n\r\n  otherWindow.postMessage(message, targrtOrigin, [transfer])\r\n  - message: 要发送给其他window的数据\r\n  - targetOrigin: 目标窗口\r\n  - transfer(可选)和message一起传递的一个对象，这个对象的所有权限将移交给消息接收方\r\n\r\n  缺点: **场景比较简单**',contentRendered:'<h1 id="什么是跨域" tabindex="-1"><a class="header-anchor" href="#什么是跨域" aria-hidden="true">#</a> 什么是跨域</h1>\n<p>浏览器都具有同源策略  --- 协议 + 域名 + 端口  都相同</p>\n<p>http://   www   .    abc.com  :    8080   /    detail   <br>\n协议    子域名       主域名        端口        请求资源地址</p>\n<ul>\n<li>\n<p>同源策略限制了ajax请求</p>\n</li>\n<li>\n<p>没有被同源策略所影响的三个标签</p>\n</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>  <span class="token operator">&lt;</span>img src<span class="token operator">=</span>"xxx<span class="token operator">></span> \n  <span class="token operator">&lt;</span>link href<span class="token operator">=</span>"xxx<span class="token operator">></span>\n  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="常见的跨域场景" tabindex="-1"><a class="header-anchor" href="#常见的跨域场景" aria-hidden="true">#</a> 常见的跨域场景</h2>\n<p>http://www.a.com/a.js   <br>\nhttp://www.a.com/b.js      同一个域名，允许通信</p>\n<p>http://www.a.com/a.js     <br>\nhttps://www.a.com/a.js     协议不同，跨域</p>\n<p>http://www.a.com/a.js      <br>\nhttp://script.a.com/a.js\t 主域相同，子域不相同，跨域</p>\n<h2 id="特别说明" tabindex="-1"><a class="header-anchor" href="#特别说明" aria-hidden="true">#</a> 特别说明</h2>\n<ol>\n<li>如果是端口和协议照成的跨域，前端是没有办法解决的</li>\n<li>跨域仅仅只是根据url的首部 来识别，不会根据这个首部对应得ip地址来判断</li>\n<li>跨域并不是请求没有发出去，请求时能发出去得，服务器也是能响应的，只是响应结果被浏览器拦截了</li>\n</ol>\n<h2 id="跨域的解决方案" tabindex="-1"><a class="header-anchor" href="#跨域的解决方案" aria-hidden="true">#</a> 跨域的解决方案</h2>\n<h3 id="_1-jsonp" tabindex="-1"><a class="header-anchor" href="#_1-jsonp" aria-hidden="true">#</a> 1. jsonp</h3>\n<p>原理：<strong>利用script标签上的src属性不会被同源的策略所拦截的这一机制</strong>，将我们要请求的url地址，添加到script的src属性中，且携带上前端全局下的函数名作为参数给到后端，后端获取到前端传递的函数名，然后返回该函数的调用语法，将要返回的数据放在该函数的调用中作为参数，当浏览器接收到全局下的函数被调用的后端响应，会自动执行该函数，从而从参数中获取到后端返回的数据</p>\n<p>缺点：</p>\n<ol>\n<li>需要对方的服务器做支持才可以</li>\n<li>只支持<strong>get</strong> 请求，有局限性，可能会遭到 <strong>XSS攻击</strong></li>\n</ol>\n<h3 id="_2-cors" tabindex="-1"><a class="header-anchor" href="#_2-cors" aria-hidden="true">#</a> 2. cors</h3>\n<p>cors是W3C的标准，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求。也就是说浏览器发请求是不会被跨域的，跨域的核心是后端响应不了。</p>\n<blockquote>\n<p>要让后端响应内容能够补被浏览器拦截，关键在于后端。如果后端也能遵从CorS标准的话，后端的响应也可以跨源.</p>\n</blockquote>\n<p>分为简单请求和复杂请求两种：</p>\n<ul>\n<li>\n<p>简单请求<br>\n. 使用GET、POST、HEAD <br>\n. Content-Type的值仅限于:<strong>text/plain || multipart/from-data || application/x-www-from-urlencoded</strong></p>\n</li>\n<li>\n<p>复杂请求<br>\n.  不满足简单请求的条件的就是复杂请求<br>\n.  复杂请求的cors请求，会在正式通信之前，增加一次http查询请求，称为&quot;预检&quot;，预检是用来知道服务端是都允许跨域请求，预检请求发的是options方法</p>\n</li>\n</ul>\n<h3 id="_3-postmessage" tabindex="-1"><a class="header-anchor" href="#_3-postmessage" aria-hidden="true">#</a> 3. postMessage</h3>\n<p>html5中的 xhr 提供的API，postMessage()方法允许来自不同源的脚本采用异步的方法进行有限通信，可以实现跨文本，多窗口，跨域消息传递 <br>\n可以解决这么几个问题：</p>\n<ul>\n<li>页面和其他新的窗口的数据传递</li>\n<li>多窗口之间的消息传递</li>\n<li>页面与嵌套的iframe消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ul>\n<p>otherWindow.postMessage(message, targrtOrigin, [transfer])</p>\n<ul>\n<li>message: 要发送给其他window的数据</li>\n<li>targetOrigin: 目标窗口</li>\n<li>transfer(可选)和message一起传递的一个对象，这个对象的所有权限将移交给消息接收方</li>\n</ul>\n<p>缺点: <strong>场景比较简单</strong></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study4.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study4",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study4.md",filePathRelative:"study/study4.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study4.html.vue",componentFilePathRelative:"pages/study/study4.html.vue",componentFileChunkName:"v-75bf51e2",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study4.html.js",dataFilePathRelative:"pages/study/study4.html.js",dataFileChunkName:"v-75bf51e2",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study4.html",htmlFilePathRelative:"study/study4.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-register/index.html.vue",componentFilePathRelative:"pages/aurora-register/index.html.vue",componentFileChunkName:"v-f693f690",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-register/index.html.js",dataFilePathRelative:"pages/aurora-register/index.html.js",dataFileChunkName:"v-f693f690",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-register/index.html",htmlFilePathRelative:"aurora-register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"}]},7039:(n,a,s)=>{s.d(a,{Z:()=>e});const e=[{data:{key:"v-245bbacd",path:"/how-to-write-article.html",title:"JavaScript数据类型的相关问题看这篇文章就够了",lang:"zh-CN",frontmatter:{date:"2022/1/20 10:08",coverUrl:"https://pic1.zhimg.com/80/v2-904505bcf0c424788f6028b8952aa2e7_1440w.jpg?source=1940ef5c",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"JavaScript 数据类型种类、存储方式、判断方法",title:"JavaScript数据类型的相关问题看这篇文章就够了",tag:["笔记"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"了解强、弱类型和动态、静态类型语言",slug:"了解强、弱类型和动态、静态类型语言",children:[{level:3,title:"强类型",slug:"强类型",children:[]},{level:3,title:"弱类型",slug:"弱类型",children:[]},{level:3,title:"静态类型",slug:"静态类型",children:[]},{level:3,title:"动态类型",slug:"动态类型",children:[]}]},{level:2,title:"基本数据类型",slug:"基本数据类型",children:[]},{level:2,title:"引用数据类型",slug:"引用数据类型",children:[{level:3,title:"引用类型的检索",slug:"引用类型的检索",children:[]}]},{level:2,title:"拓展：深浅拷贝",slug:"拓展-深浅拷贝",children:[{level:3,title:"手写方法实现深拷贝：",slug:"手写方法实现深拷贝",children:[]}]},{level:2,title:"typeof方法",slug:"typeof方法",children:[]},{level:2,title:"拓展：为什么null返回的是一个object呢？",slug:"拓展-为什么null返回的是一个object呢",children:[]},{level:2,title:"instanceof方法",slug:"instanceof方法",children:[]}],git:{updatedTime:1642668034e3,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:1}]}},key:"v-245bbacd",path:"/how-to-write-article.html",title:"JavaScript数据类型的相关问题看这篇文章就够了",lang:"zh-CN",frontmatter:{date:"2022/1/20 10:08",coverUrl:"https://pic1.zhimg.com/80/v2-904505bcf0c424788f6028b8952aa2e7_1440w.jpg?source=1940ef5c",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"JavaScript 数据类型种类、存储方式、判断方法",title:"JavaScript数据类型的相关问题看这篇文章就够了",tag:["笔记"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"了解强、弱类型和动态、静态类型语言",slug:"了解强、弱类型和动态、静态类型语言",children:[{level:3,title:"强类型",slug:"强类型",children:[]},{level:3,title:"弱类型",slug:"弱类型",children:[]},{level:3,title:"静态类型",slug:"静态类型",children:[]},{level:3,title:"动态类型",slug:"动态类型",children:[]}]},{level:2,title:"基本数据类型",slug:"基本数据类型",children:[]},{level:2,title:"引用数据类型",slug:"引用数据类型",children:[{level:3,title:"引用类型的检索",slug:"引用类型的检索",children:[]}]},{level:2,title:"拓展：深浅拷贝",slug:"拓展-深浅拷贝",children:[{level:3,title:"手写方法实现深拷贝：",slug:"手写方法实现深拷贝",children:[]}]},{level:2,title:"typeof方法",slug:"typeof方法",children:[]},{level:2,title:"拓展：为什么null返回的是一个object呢？",slug:"拓展-为什么null返回的是一个object呢",children:[]},{level:2,title:"instanceof方法",slug:"instanceof方法",children:[]}],content:"\r\n\r\n# JavaScript 数据类型\r\n值类型（基本类型）有7种，分别是 \r\n- undefined\r\n- null\r\n- Boolean\r\n- String\r\n- Number\r\n- Symbol(ES6新增)\r\n- BigInt(ES10新增)\r\n\r\n引用类型：\r\n- Object\r\n- Array\r\n- function\r\n- Set\r\n- Map\r\n- WeakMap\r\n- WeakSet\r\n- RegExp\r\n- Date\r\n- Math…\r\n# 拓展：JavaScript 是一种动态弱类型语言。\r\n这意味着相同的变量可用作不同的类型：\r\n\r\n```js\r\nvar x;               // x 为 undefined\r\nvar x = 5;           // 现在 x 为数字\r\nvar x = \"John\";      // 现在 x 为字符串\r\n```\r\n## 了解强、弱类型和动态、静态类型语言\r\n### 强类型\r\n\r\n-   语言层面限制函数的实参类型必须与形参类型相同\r\n-   强类型语言中不允许任意的隐式类型转换\r\n\r\n### 弱类型\r\n\r\n-   弱类型语言层面不会限制实参的类型\r\n-   弱类型语言允许任意的数据隐式类型转换\r\n\r\n### 静态类型\r\n\r\n一个变量声明时它的类型就是明确的，声明过后它的类型不再允许修改\r\n\r\n### 动态类型\r\n\r\n- 运行阶段才能够明确变量类型，变量的类型随时可以改变\r\n\r\n- 动态类型语言中的变量没有类型，变量中存放的值才有类型\r\n# 基本数据类型和引用数据类型的存储方式：\r\n## 基本数据类型\r\n基本数据类型存储在**栈内存**，存储的是**值**。\r\n> 原始类型存储的都是值，是没有函数可以调用的。\r\n## 引用数据类型\r\n引用数据类型的值存储在**堆内存**，**地址指针**（该指针指向堆中的该实体）存储在栈内存。\r\n> 之所以引用数据类型存储在堆内存中，是因为引用数据类型占据空间大、占用内存不固定。 如果存储在栈中，将会影响程序运行的性能。\r\n### 引用类型的检索\r\n当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体；所以当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。上述的赋值行为发生**浅拷贝**：拷贝的是栈中的内存地址，所以如果其中一个对象改变了这个地址里的值，就会影响到另一个对象。\r\n## 拓展：深浅拷贝\r\n在JavaScript中，基本类型 值的复制是直接拷贝一份新的一模一样的数据，这两份数据相互独立，互不影响。而引用类型值的复制则为传递对象的引用，则需要考虑深浅拷贝的问题。\r\n\r\n-   深拷贝：创建一个新的对象，将一个对象从内存中**完整地拷贝**出来一份给该新对象，并从**堆内存中开辟一个全新的空间存放新对象**，且新对象的修改并不会改变原对象。\r\n\r\n```js\r\nlet arr = [1, 2, 3, 4, 5]\r\nlet arr2 =JSON.parse(JSON.stringify(arr))       \r\n// arr.slice()    // [...arr]     //[].concat(arr)    皆可实现数组的深拷贝\r\n// JSON.parse(JSON.stringify(arr))  先将arr变成字符串  然后再将arr变成对象\r\n\r\narr[0] = 0\r\nconsole.log(arr2);      // [1, 2, 3, 4, 5]\r\n```\r\n\r\n-   浅拷贝：创建一个新的对象，来接收你要拷贝的对象的值，复制的是**栈内存中存放的的地址**，所以两者指向的**仍然是堆里的同一个对象**，所以如果其中一个对象改变了栈内存中存放的地址所指向的对象，就会影响到另一个对象。\r\n\r\n```js\r\nlet c = {name:'小明', age: 18}\r\nlet d = c\r\nc.age = 19\r\nconsole.log(d);   // { name: '小明', age: 19 }\r\n```\r\n\r\n### 手写方法实现深拷贝：\r\n\r\n```js\r\nlet person = {\r\n    name: '小明',\r\n    age: 18,\r\n    like: {\r\n        sport: 'running',\r\n        food: 'beef'\r\n    }\r\n}\r\n\r\nfunction deepCopy(obj) {\r\n    let n = obj instanceof Array ? [] : {}     // 判断是否为Array  来判断创建n的数据类型\r\n    for (let item in obj) {\r\n        if (obj.hasOwnProperty(item)) {     // 判断是自己的  还是原型上继承下来的\r\n            n[item] = obj[item] instanceof Object ? deepCopy(obj[item]) : obj[item]    \r\n            // 判断item是否还是对象或数组\r\n        }\r\n    }\r\n    return n\r\n}\r\n\r\nlet newPerson = deepCopy(person)\r\nperson.like.sport = 'swimming'\r\nconsole.log(newPerson);     // { name: '小明', age: 18, like: { sport: 'running', food: 'beef' } }\r\nconsole.log(person);       // { name: '小明', age: 18, like: { sport: 'swimming', food: 'beef' } }\r\n\r\n```\r\n\r\n\r\n\r\n# 判断数据类型的方法\r\n## typeof方法\r\n可以通过typeof检测基本类型和引用类型，不过检测出来的引用类型都是对象：\r\n\r\n```js\r\nconsole.log(\r\n    typeof 123,     //number\r\n    typeof 'abc',   //string\r\n    typeof false,   //boolean\r\n    typeof undefined, //undefined\r\n    typeof null, //object\r\n    typeof function(){console.log('aaa');}, // function\r\n    typeof new Date(), //object\r\n    typeof [1,2,3], //object\r\n    typeof {a:1,b:2,c:3}   //object\r\n);\r\n```\r\n首先 **typeof** 能够正确的判断基本数据类型，但除了null, **typeof null所输出的为object**。\r\n但是对于对象来说，`typeof`也不能正确的判断其类型， 如`typeof`一个函数可以输出 `function`,而除此之外，输出的全是` object`,这种情况下，我们无法准确的知道对象的类型。\r\n## 拓展：为什么null返回的是一个object呢？\r\njs 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息\r\n-   000：对象\r\n-   010：浮点数\r\n-   100：字符串\r\n-   110：布尔\r\n-   1：整数\r\n在JS的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 `null` 表示为全零，所以typeof错误的将它判断为 `object` 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。\r\n\r\n#### null 和 undefined 的区别：\r\n- `null` 是 javascript 的关键字，表示一个特殊值，常用来描述\"空值\"，typeof 运算返回\"object\"。\r\n- `undefined` 是预定义的全局变量，他的值就是\"未定义\"， typeof 运算返回 \"undefined\"\r\n- `undefined` 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。\r\n- 相对来说，null更接近其他语言的空、而undefined则是js特有的机制\r\n## instanceof方法\r\n由上可知`typeof`来判断引用类型是不准确的，故想要检测引用类型可以通过 **instanceof**\r\n\r\n    语法：object instanceof constructor（object为实例对象，constructor为构造函数）\r\n    \r\n关于**instanceof** 的实现原理的理解，可参考下面的代码：\r\n\r\n```js\r\nfunction instance_of (left, right){\r\n    let leftVal = left.__proto__\r\n    let rightVal = right.prototype\r\n    while(true){\r\n        if(leftVal === null) return false\r\n        if(leftVal === rightVal)  return true\r\n        leftVal = leftVal.__proto__\r\n    }\r\n}\r\nlet a = [1, 2, 3]\r\nconsole.log(instance_of(a,Array));    // true\r\n```\r\n由此可知`instanceof`是顺着**原型链**去找，直到找到相同的原型对象，返回true，否则为false。\r\n\r\n**instanceof**可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型\r\n\r\n",contentRendered:'<h1 id="javascript-数据类型" tabindex="-1"><a class="header-anchor" href="#javascript-数据类型" aria-hidden="true">#</a> JavaScript 数据类型</h1>\n<p>值类型（基本类型）有7种，分别是</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Symbol(ES6新增)</li>\n<li>BigInt(ES10新增)</li>\n</ul>\n<p>引用类型：</p>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>function</li>\n<li>Set</li>\n<li>Map</li>\n<li>WeakMap</li>\n<li>WeakSet</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Math…</li>\n</ul>\n<h1 id="拓展-javascript-是一种动态弱类型语言。" tabindex="-1"><a class="header-anchor" href="#拓展-javascript-是一种动态弱类型语言。" aria-hidden="true">#</a> 拓展：JavaScript 是一种动态弱类型语言。</h1>\n<p>这意味着相同的变量可用作不同的类型：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> x<span class="token punctuation">;</span>               <span class="token comment">// x 为 undefined</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>           <span class="token comment">// 现在 x 为数字</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>      <span class="token comment">// 现在 x 为字符串</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="了解强、弱类型和动态、静态类型语言" tabindex="-1"><a class="header-anchor" href="#了解强、弱类型和动态、静态类型语言" aria-hidden="true">#</a> 了解强、弱类型和动态、静态类型语言</h2>\n<h3 id="强类型" tabindex="-1"><a class="header-anchor" href="#强类型" aria-hidden="true">#</a> 强类型</h3>\n<ul>\n<li>语言层面限制函数的实参类型必须与形参类型相同</li>\n<li>强类型语言中不允许任意的隐式类型转换</li>\n</ul>\n<h3 id="弱类型" tabindex="-1"><a class="header-anchor" href="#弱类型" aria-hidden="true">#</a> 弱类型</h3>\n<ul>\n<li>弱类型语言层面不会限制实参的类型</li>\n<li>弱类型语言允许任意的数据隐式类型转换</li>\n</ul>\n<h3 id="静态类型" tabindex="-1"><a class="header-anchor" href="#静态类型" aria-hidden="true">#</a> 静态类型</h3>\n<p>一个变量声明时它的类型就是明确的，声明过后它的类型不再允许修改</p>\n<h3 id="动态类型" tabindex="-1"><a class="header-anchor" href="#动态类型" aria-hidden="true">#</a> 动态类型</h3>\n<ul>\n<li>\n<p>运行阶段才能够明确变量类型，变量的类型随时可以改变</p>\n</li>\n<li>\n<p>动态类型语言中的变量没有类型，变量中存放的值才有类型</p>\n</li>\n</ul>\n<h1 id="基本数据类型和引用数据类型的存储方式" tabindex="-1"><a class="header-anchor" href="#基本数据类型和引用数据类型的存储方式" aria-hidden="true">#</a> 基本数据类型和引用数据类型的存储方式：</h1>\n<h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2>\n<p>基本数据类型存储在<strong>栈内存</strong>，存储的是<strong>值</strong>。</p>\n<blockquote>\n<p>原始类型存储的都是值，是没有函数可以调用的。</p>\n</blockquote>\n<h2 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h2>\n<p>引用数据类型的值存储在<strong>堆内存</strong>，<strong>地址指针</strong>（该指针指向堆中的该实体）存储在栈内存。</p>\n<blockquote>\n<p>之所以引用数据类型存储在堆内存中，是因为引用数据类型占据空间大、占用内存不固定。 如果存储在栈中，将会影响程序运行的性能。</p>\n</blockquote>\n<h3 id="引用类型的检索" tabindex="-1"><a class="header-anchor" href="#引用类型的检索" aria-hidden="true">#</a> 引用类型的检索</h3>\n<p>当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体；所以当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。上述的赋值行为发生<strong>浅拷贝</strong>：拷贝的是栈中的内存地址，所以如果其中一个对象改变了这个地址里的值，就会影响到另一个对象。</p>\n<h2 id="拓展-深浅拷贝" tabindex="-1"><a class="header-anchor" href="#拓展-深浅拷贝" aria-hidden="true">#</a> 拓展：深浅拷贝</h2>\n<p>在JavaScript中，基本类型 值的复制是直接拷贝一份新的一模一样的数据，这两份数据相互独立，互不影响。而引用类型值的复制则为传递对象的引用，则需要考虑深浅拷贝的问题。</p>\n<ul>\n<li>深拷贝：创建一个新的对象，将一个对象从内存中<strong>完整地拷贝</strong>出来一份给该新对象，并从<strong>堆内存中开辟一个全新的空间存放新对象</strong>，且新对象的修改并不会改变原对象。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>       \n<span class="token comment">// arr.slice()    // [...arr]     //[].concat(arr)    皆可实现数组的深拷贝</span>\n<span class="token comment">// JSON.parse(JSON.stringify(arr))  先将arr变成字符串  然后再将arr变成对象</span>\n\narr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul>\n<li>浅拷贝：创建一个新的对象，来接收你要拷贝的对象的值，复制的是<strong>栈内存中存放的的地址</strong>，所以两者指向的<strong>仍然是堆里的同一个对象</strong>，所以如果其中一个对象改变了栈内存中存放的地址所指向的对象，就会影响到另一个对象。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'小明\'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> d <span class="token operator">=</span> c\nc<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// { name: \'小明\', age: 19 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="手写方法实现深拷贝" tabindex="-1"><a class="header-anchor" href="#手写方法实现深拷贝" aria-hidden="true">#</a> 手写方法实现深拷贝：</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'小明\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">like</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">sport</span><span class="token operator">:</span> <span class="token string">\'running\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">food</span><span class="token operator">:</span> <span class="token string">\'beef\'</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> n <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// 判断是否为Array  来判断创建n的数据类型</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 判断是自己的  还是原型上继承下来的</span>\n            n<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span>    \n            <span class="token comment">// 判断item是否还是对象或数组</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> newPerson <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>\nperson<span class="token punctuation">.</span>like<span class="token punctuation">.</span>sport <span class="token operator">=</span> <span class="token string">\'swimming\'</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// { name: \'小明\', age: 18, like: { sport: \'running\', food: \'beef\' } }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// { name: \'小明\', age: 18, like: { sport: \'swimming\', food: \'beef\' } }</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h1 id="判断数据类型的方法" tabindex="-1"><a class="header-anchor" href="#判断数据类型的方法" aria-hidden="true">#</a> 判断数据类型的方法</h1>\n<h2 id="typeof方法" tabindex="-1"><a class="header-anchor" href="#typeof方法" aria-hidden="true">#</a> typeof方法</h2>\n<p>可以通过typeof检测基本类型和引用类型，不过检测出来的引用类型都是对象：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">,</span>     <span class="token comment">//number</span>\n    <span class="token keyword">typeof</span> <span class="token string">\'abc\'</span><span class="token punctuation">,</span>   <span class="token comment">//string</span>\n    <span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment">//boolean</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">//undefined</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">//object</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'aaa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// function</span>\n    <span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//object</span>\n    <span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//object</span>\n    <span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span>   <span class="token comment">//object</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>首先 <strong>typeof</strong> 能够正确的判断基本数据类型，但除了null, <strong>typeof null所输出的为object</strong>。\n但是对于对象来说，<code>typeof</code>也不能正确的判断其类型， 如<code>typeof</code>一个函数可以输出 <code>function</code>,而除此之外，输出的全是<code> object</code>,这种情况下，我们无法准确的知道对象的类型。</p>\n<h2 id="拓展-为什么null返回的是一个object呢" tabindex="-1"><a class="header-anchor" href="#拓展-为什么null返回的是一个object呢" aria-hidden="true">#</a> 拓展：为什么null返回的是一个object呢？</h2>\n<p>js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息</p>\n<ul>\n<li>000：对象</li>\n<li>010：浮点数</li>\n<li>100：字符串</li>\n<li>110：布尔</li>\n<li>1：整数\n在JS的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 <code>null</code> 表示为全零，所以typeof错误的将它判断为 <code>object</code> 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</li>\n</ul>\n<h4 id="null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-的区别" aria-hidden="true">#</a> null 和 undefined 的区别：</h4>\n<ul>\n<li><code>null</code> 是 javascript 的关键字，表示一个特殊值，常用来描述&quot;空值&quot;，typeof 运算返回&quot;object&quot;。</li>\n<li><code>undefined</code> 是预定义的全局变量，他的值就是&quot;未定义&quot;， typeof 运算返回 &quot;undefined&quot;</li>\n<li><code>undefined</code> 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。</li>\n<li>相对来说，null更接近其他语言的空、而undefined则是js特有的机制</li>\n</ul>\n<h2 id="instanceof方法" tabindex="-1"><a class="header-anchor" href="#instanceof方法" aria-hidden="true">#</a> instanceof方法</h2>\n<p>由上可知<code>typeof</code>来判断引用类型是不准确的，故想要检测引用类型可以通过 <strong>instanceof</strong></p>\n<pre><code>语法：object instanceof constructor（object为实例对象，constructor为构造函数）\n</code></pre>\n<p>关于<strong>instanceof</strong> 的实现原理的理解，可参考下面的代码：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">instance_of</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> leftVal <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__\n    <span class="token keyword">let</span> rightVal <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>leftVal <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>leftVal <span class="token operator">===</span> rightVal<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span>\n        leftVal <span class="token operator">=</span> leftVal<span class="token punctuation">.</span>__proto__\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">instance_of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>Array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>由此可知<code>instanceof</code>是顺着<strong>原型链</strong>去找，直到找到相同的原型对象，返回true，否则为false。</p>\n<p><strong>instanceof</strong>可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/how-to-write-article.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"how-to-write-article",filePath:"C:/Users/mi/Desktop/我的博客/docs/how-to-write-article.md",filePathRelative:"how-to-write-article.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/how-to-write-article.html.vue",componentFilePathRelative:"pages/how-to-write-article.html.vue",componentFileChunkName:"v-245bbacd",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/how-to-write-article.html.js",dataFilePathRelative:"pages/how-to-write-article.html.js",dataFileChunkName:"v-245bbacd",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/how-to-write-article.html",htmlFilePathRelative:"how-to-write-article.html"},{data:{key:"v-7ffc659c",path:"/study/study1.html",title:"扁平化",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202112/4df6635c747bc083c7f159628e545666--2426815410.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"数组扁平化且删除重复数据",title:"扁平化",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"实现方法",slug:"实现方法",children:[{level:3,title:"扩展：手写flat",slug:"扩展-手写flat",children:[]}]}],git:{updatedTime:1642771259e3,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:2}]}},key:"v-7ffc659c",path:"/study/study1.html",title:"扁平化",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202112/4df6635c747bc083c7f159628e545666--2426815410.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"数组扁平化且删除重复数据",title:"扁平化",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:2,title:"实现方法",slug:"实现方法",children:[{level:3,title:"扩展：手写flat",slug:"扩展-手写flat",children:[]}]}],content:"\r\n# 题目示例：\r\n已知如下数组：\r\n\r\n\r\n```js\r\nvar arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];\r\n```\r\n编写一个程序将数组扁平化并去除其中重复部分数据，最终得到一个升序且不重复的数组。\r\n## 实现方法\r\n\r\n```js\r\nArray.from(new Set(arr.flat(`Infinity`))).sort((a,b)=>{ return a-b})\r\n```\r\n- ` flat()  ` 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。`flat`的语法：\r\n> var newArray = arr.flat([depth])\\\r\n> `depth` 指定要提取嵌套数组的结构深度，默认值为 1。\r\n- 全局属性 `Infinity` 是一个数值，表示无穷大。\r\n- `Set`中的元素只会**出现一次**，即 Set 中的元素是唯一的。\r\n- ` Array.from()  ` 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\r\n- ` sort()  ` 对数组的元素进行排序，并返回数组。\r\n### 扩展：手写flat\r\n此处仅列举几种简单易懂的方法：\\\r\n\\\r\n`instanceof`递归实现：\r\n```js\r\nfunction myflat1(arr){\r\n    let res = []\r\n    function bp(arr)  {\r\n        let len = arr.length\r\n        for(let i = 0;i < len; i++){\r\n            if( arr[i] instanceof Array){     // 判断该元素是否为数组\r\n                let a = [...arr[i]]           // 如果是数组  对其进行结构  再进行递归\r\n                bp(a)\r\n            }else{\r\n                res.push(arr[i])            // 元素不为数组时 push到res数组里\r\n            }\r\n        }\r\n    }\r\n    bp(arr)\r\n    return res\r\n}\r\n```\r\n转字符串切割：\r\n\r\n```js\r\nfunction myflat2(arr){\r\n    arr = arr.toString()         // 将数组进行字符串转换\r\n    arr = arr.split(',')         // split()方法将字符串进行分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。 \r\n    for(let i = 0,len = arr.length;i < len; i++){ \r\n        arr[i] = Number(arr[i])  // 将字符串数组的元素转换成Number类型\r\n    }\r\n    return arr\r\n}\r\n```\r\n基于`Array.isArray`的`while`循环\r\n\r\n```js\r\nfunction myflat3(arr) {\r\n    while (arr.some(Array.isArray)) {     \r\n        // Array.isArray() 用于确定传递的值是否是一个Array  \r\n        //some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试\r\n        arr = [].concat(...arr)  \r\n    }\r\n    return arr\r\n}\r\n```",contentRendered:'<h1 id="题目示例" tabindex="-1"><a class="header-anchor" href="#题目示例" aria-hidden="true">#</a> 题目示例：</h1>\n<p>已知如下数组：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>编写一个程序将数组扁平化并去除其中重复部分数据，最终得到一个升序且不重复的数组。</p>\n<h2 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法" aria-hidden="true">#</a> 实现方法</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Infinity</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul>\n<li><code>flat() </code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。<code>flat</code>的语法：</li>\n</ul>\n<blockquote>\n<p>var newArray = arr.flat([depth])<br>\n<code>depth</code> 指定要提取嵌套数组的结构深度，默认值为 1。</p>\n</blockquote>\n<ul>\n<li>全局属性 <code>Infinity</code> 是一个数值，表示无穷大。</li>\n<li><code>Set</code>中的元素只会<strong>出现一次</strong>，即 Set 中的元素是唯一的。</li>\n<li><code>Array.from() </code> 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</li>\n<li><code>sort() </code> 对数组的元素进行排序，并返回数组。</li>\n</ul>\n<h3 id="扩展-手写flat" tabindex="-1"><a class="header-anchor" href="#扩展-手写flat" aria-hidden="true">#</a> 扩展：手写flat</h3>\n<p>此处仅列举几种简单易懂的方法：<br>\n<br>\n<code>instanceof</code>递归实现：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myflat1</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">function</span> <span class="token function">bp</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 判断该元素是否为数组</span>\n                <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>           <span class="token comment">// 如果是数组  对其进行结构  再进行递归</span>\n                <span class="token function">bp</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment">// 元素不为数组时 push到res数组里</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">bp</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>转字符串切割：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myflat2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// 将数组进行字符串转换</span>\n    arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span>         <span class="token comment">// split()方法将字符串进行分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。 </span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 将字符串数组的元素转换成Number类型</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>基于<code>Array.isArray</code>的<code>while</code>循环</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myflat3</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     \n        <span class="token comment">// Array.isArray() 用于确定传递的值是否是一个Array  </span>\n        <span class="token comment">//some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试</span>\n        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>  \n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study1",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study1.md",filePathRelative:"study/study1.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study1.html.vue",componentFilePathRelative:"pages/study/study1.html.vue",componentFileChunkName:"v-7ffc659c",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study1.html.js",dataFilePathRelative:"pages/study/study1.html.js",dataFileChunkName:"v-7ffc659c",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study1.html",htmlFilePathRelative:"study/study1.html"},{data:{key:"v-7c92b45e",path:"/study/study2.html",title:"防抖和节流",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"https://www.toopic.cn/public/uploads/small/1634265816194163426581671.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"什么是防抖和节流？有什么区别？如何实现？",title:"防抖和节流",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[],git:{updatedTime:16427402e5,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:1}]}},key:"v-7c92b45e",path:"/study/study2.html",title:"防抖和节流",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"https://www.toopic.cn/public/uploads/small/1634265816194163426581671.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"什么是防抖和节流？有什么区别？如何实现？",title:"防抖和节流",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[],content:"\r\n1.  **防抖**\r\n\r\n> 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间\r\n\r\n-   思路：\r\n\r\n> 每次触发事件时都取消之前的延时调用方法\r\n\r\n```js\r\nfunction debounce(fn,delay) {\r\n      let timeout = null; // 创建一个标记用来存放定时器的返回值\r\n      return function () {\r\n        clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\r\n        timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\r\n          fn.apply(this, arguments);  //加了apply，此时this为debounce的\r\n        }, delay);     // delay为事件触发时间间隔\r\n      };\r\n    }\r\n```\r\n2.  **节流**\r\n\r\n> 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率\r\n\r\n-   思路：\r\n\r\n> 每次触发事件时都判断与前一次执行是否间隔事件大于n秒\r\n\r\n```js\r\nfunction throttle(fn, delay){\r\n    let time = 0\r\n    return function(){\r\n        let now = Date.now();     // 每次点击都记录此时的时间戳\r\n        //console.log(now);\r\n        if(now - time >= delay){ //点击时的时间相比较前一次点击  至少要相差delay时间  否则不执行\r\n            fn.apply(this,arguments) //加了apply，此时this为throttle的 \r\n        }\r\n        time = Date.now()     // 触发事件之后，更新此时的时间，用于下一次的判断\r\n    }\r\n}\r\n```",contentRendered:'<ol>\n<li><strong>防抖</strong></li>\n</ol>\n<blockquote>\n<p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p>\n</blockquote>\n<ul>\n<li>思路：</li>\n</ul>\n<blockquote>\n<p>每次触发事件时都取消之前的延时调用方法</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个标记用来存放定时器的返回值</span>\n      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每当用户输入的时候把前一个 setTimeout clear 掉</span>\n        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span>\n          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加了apply，此时this为debounce的</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// delay为事件触发时间间隔</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="2">\n<li><strong>节流</strong></li>\n</ol>\n<blockquote>\n<p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p>\n</blockquote>\n<ul>\n<li>思路：</li>\n</ul>\n<blockquote>\n<p>每次触发事件时都判断与前一次执行是否间隔事件大于n秒</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 每次点击都记录此时的时间戳</span>\n        <span class="token comment">//console.log(now);</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> time <span class="token operator">>=</span> delay<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//点击时的时间相比较前一次点击  至少要相差delay时间  否则不执行</span>\n            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span> <span class="token comment">//加了apply，此时this为throttle的 </span>\n        <span class="token punctuation">}</span>\n        time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 触发事件之后，更新此时的时间，用于下一次的判断</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study2.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study2",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study2.md",filePathRelative:"study/study2.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study2.html.vue",componentFilePathRelative:"pages/study/study2.html.vue",componentFileChunkName:"v-7c92b45e",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study2.html.js",dataFilePathRelative:"pages/study/study2.html.js",dataFileChunkName:"v-7c92b45e",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study2.html",htmlFilePathRelative:"study/study2.html"},{data:{key:"v-79290320",path:"/study/study3.html",title:"输出什么",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202109/ac3990b3d19dd512dd6f6a364e70848a--1897315302.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"输出什么",title:"输出什么",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:3,title:"map",slug:"map",children:[]},{level:3,title:"parseInt",slug:"parseint",children:[]},{level:3,title:"回到真实的事例上",slug:"回到真实的事例上",children:[]}],git:{updatedTime:16427402e5,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:1}]}},key:"v-79290320",path:"/study/study3.html",title:"输出什么",lang:"zh-CN",frontmatter:{date:"2022/1/20 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202109/ac3990b3d19dd512dd6f6a364e70848a--1897315302.jpg",sticky:!0,keyword:"设置keyword,设置keyword,设置keyword,设置keyword",description:"输出什么",title:"输出什么",tag:["面试题"],categories:["Javascript"]},excerpt:"",headers:[{level:3,title:"map",slug:"map",children:[]},{level:3,title:"parseInt",slug:"parseint",children:[]},{level:3,title:"回到真实的事例上",slug:"回到真实的事例上",children:[]}],content:"\r\n### map\r\n`map()` 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\r\n\r\n\r\n```js\r\nvar new_array = arr.map(function callback(currentValue[,index[, array]]) {\r\n // Return element for new_array\r\n }[, thisArg])\r\n```\r\n可以看到`callback`回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。\\\r\n`currentValue` 是callback 数组中正在处理的当前元素。\\\r\n`index`可选, 是callback 数组中正在处理的当前元素的索引。\\\r\n`array`可选, 是callback map 方法被调用的数组。\\\r\n另外还有`thisArg`可选, 执行 callback 函数时使用的this 值。\r\n\r\n```js\r\nconst arr = [1, 2, 3];\r\narr.map((num) => num + 1); // [2, 3, 4]\r\n```\r\n### parseInt\r\n`parseInt()` 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。\r\n\r\n```js\r\nconst intValue = parseInt(string[, radix]);\r\n```\r\n`string` 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。\r\n\r\n`radix` 一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。默认为10。\\\r\n`返回值` 返回一个整数或NaN\r\n\r\n```js\r\nparseInt(100); // 100\r\nparseInt(100, 10); // 100\r\nparseInt(100, 2); // 4 -> 将100视为2进制下的显示  则为4\r\n```\r\n\r\n### 回到真实的事例上\r\n\r\n回到我们真实的事例上\r\n\r\n```js\r\n['1', '2', '3'].map(parseInt)\r\n```\r\n对于每个迭代`map`, `parseInt()`传递两个参数: **字符串和基数**。\\\r\n所以实际执行的的代码是：\r\n\r\n```js\r\n['1', '2', '3'].map((item, index) => {\r\n\treturn parseInt(item, index)\r\n})\r\n```\r\n即返回的值分别为：\r\n\r\n```js\r\nparseInt('1', 0) // 1\r\nparseInt('2', 1) // NaN\r\nparseInt('3', 2) // NaN, 3 不是二进制\r\n```\r\n所以：\r\n\r\n```js\r\n['1', '2', '3'].map(parseInt)\r\n// 1, NaN, NaN\r\n```",contentRendered:'<h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3>\n<p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span>index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token comment">// Return element for new_array</span>\n <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到<code>callback</code>回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。<br>\n<code>currentValue</code> 是callback 数组中正在处理的当前元素。<br>\n<code>index</code>可选, 是callback 数组中正在处理的当前元素的索引。<br>\n<code>array</code>可选, 是callback map 方法被调用的数组。<br>\n另外还有<code>thisArg</code>可选, 执行 callback 函数时使用的this 值。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint" aria-hidden="true">#</a> parseInt</h3>\n<p><code>parseInt()</code> 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> intValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">,</span> radix<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>string</code> 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p>\n<p><code>radix</code> 一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。默认为10。<br>\n<code>返回值</code> 返回一个整数或NaN</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 -> 将100视为2进制下的显示  则为4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="回到真实的事例上" tabindex="-1"><a class="header-anchor" href="#回到真实的事例上" aria-hidden="true">#</a> 回到真实的事例上</h3>\n<p>回到我们真实的事例上</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>对于每个迭代<code>map</code>, <code>parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。<br>\n所以实际执行的的代码是：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>即返回的值分别为：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">\'3\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// NaN, 3 不是二进制</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span>\n<span class="token comment">// 1, NaN, NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study3.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study3",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study3.md",filePathRelative:"study/study3.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study3.html.vue",componentFilePathRelative:"pages/study/study3.html.vue",componentFileChunkName:"v-79290320",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study3.html.js",dataFilePathRelative:"pages/study/study3.html.js",dataFileChunkName:"v-79290320",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study3.html",htmlFilePathRelative:"study/study3.html"},{data:{key:"v-75bf51e2",path:"/study/study4.html",title:"跨域",lang:"zh-CN",frontmatter:{date:"2022/1/21 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202201/ec75de816ec1a1e965b9604a936e5c3e--333631415.jpg",sticky:!0,keyword:"跨域,jsonp,cros,postMessage",description:"跨域",title:"跨域",tag:["跨域","面试题"],categories:["跨域"]},excerpt:"",headers:[{level:2,title:"常见的跨域场景",slug:"常见的跨域场景",children:[]},{level:2,title:"特别说明",slug:"特别说明",children:[]},{level:2,title:"跨域的解决方案",slug:"跨域的解决方案",children:[{level:3,title:"1. jsonp",slug:"_1-jsonp",children:[]},{level:3,title:"2. cors",slug:"_2-cors",children:[]},{level:3,title:"3. postMessage",slug:"_3-postmessage",children:[]}]}],git:{updatedTime:1642771259e3,contributors:[{name:"iewgnafil",email:"1519467168@qq.com",commits:2}]}},key:"v-75bf51e2",path:"/study/study4.html",title:"跨域",lang:"zh-CN",frontmatter:{date:"2022/1/21 20:23",coverUrl:"http://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202201/ec75de816ec1a1e965b9604a936e5c3e--333631415.jpg",sticky:!0,keyword:"跨域,jsonp,cros,postMessage",description:"跨域",title:"跨域",tag:["跨域","面试题"],categories:["跨域"]},excerpt:"",headers:[{level:2,title:"常见的跨域场景",slug:"常见的跨域场景",children:[]},{level:2,title:"特别说明",slug:"特别说明",children:[]},{level:2,title:"跨域的解决方案",slug:"跨域的解决方案",children:[{level:3,title:"1. jsonp",slug:"_1-jsonp",children:[]},{level:3,title:"2. cors",slug:"_2-cors",children:[]},{level:3,title:"3. postMessage",slug:"_3-postmessage",children:[]}]}],content:'\r\n# 什么是跨域\r\n浏览器都具有同源策略  --- 协议 + 域名 + 端口  都相同\r\n\r\nhttp://   www   .    abc.com  :    8080   /    detail   \\\r\n 协议    子域名       主域名        端口        请求资源地址\r\n\r\n\r\n - 同源策略限制了ajax请求\r\n\r\n - 没有被同源策略所影响的三个标签\r\n ```js\r\n   <img src="xxx> \r\n   <link href="xxx>\r\n   <script src="xxx">\r\n```\r\n   \r\n\r\n## 常见的跨域场景\r\nhttp://www.a.com/a.js   \\\r\nhttp://www.a.com/b.js      同一个域名，允许通信\r\n\r\n\r\nhttp://www.a.com/a.js     \\\r\nhttps://www.a.com/a.js     协议不同，跨域\r\n\r\n\r\nhttp://www.a.com/a.js      \\\r\nhttp://script.a.com/a.js\t 主域相同，子域不相同，跨域\r\n\r\n\r\n## 特别说明\r\n1. 如果是端口和协议照成的跨域，前端是没有办法解决的\r\n2. 跨域仅仅只是根据url的首部 来识别，不会根据这个首部对应得ip地址来判断\r\n3. 跨域并不是请求没有发出去，请求时能发出去得，服务器也是能响应的，只是响应结果被浏览器拦截了\r\n\r\n\r\n## 跨域的解决方案\r\n### 1. jsonp\r\n  原理：**利用script标签上的src属性不会被同源的策略所拦截的这一机制**，将我们要请求的url地址，添加到script的src属性中，且携带上前端全局下的函数名作为参数给到后端，后端获取到前端传递的函数名，然后返回该函数的调用语法，将要返回的数据放在该函数的调用中作为参数，当浏览器接收到全局下的函数被调用的后端响应，会自动执行该函数，从而从参数中获取到后端返回的数据\r\n\r\n  缺点：\r\n  1. 需要对方的服务器做支持才可以\r\n  2. 只支持**get** 请求，有局限性，可能会遭到 **XSS攻击**\r\n\r\n\r\n### 2. cors\r\n  cors是W3C的标准，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求。也就是说浏览器发请求是不会被跨域的，跨域的核心是后端响应不了。\r\n\r\n  >要让后端响应内容能够补被浏览器拦截，关键在于后端。如果后端也能遵从CorS标准的话，后端的响应也可以跨源.\r\n\r\n分为简单请求和复杂请求两种：\r\n  - 简单请求\\\r\n    . 使用GET、POST、HEAD \\\r\n    . Content-Type的值仅限于:**text/plain || multipart/from-data || application/x-www-from-urlencoded**\r\n\r\n  - 复杂请求\\\r\n    .  不满足简单请求的条件的就是复杂请求\\\r\n    .  复杂请求的cors请求，会在正式通信之前，增加一次http查询请求，称为"预检"，预检是用来知道服务端是都允许跨域请求，预检请求发的是options方法\r\n\r\n### 3. postMessage\r\n  html5中的 xhr 提供的API，postMessage()方法允许来自不同源的脚本采用异步的方法进行有限通信，可以实现跨文本，多窗口，跨域消息传递 \\\r\n  可以解决这么几个问题：\r\n  - 页面和其他新的窗口的数据传递\r\n  - 多窗口之间的消息传递\r\n  - 页面与嵌套的iframe消息传递\r\n  - 上面三个场景的跨域数据传递\r\n\r\n\r\n  otherWindow.postMessage(message, targrtOrigin, [transfer])\r\n  - message: 要发送给其他window的数据\r\n  - targetOrigin: 目标窗口\r\n  - transfer(可选)和message一起传递的一个对象，这个对象的所有权限将移交给消息接收方\r\n\r\n  缺点: **场景比较简单**',contentRendered:'<h1 id="什么是跨域" tabindex="-1"><a class="header-anchor" href="#什么是跨域" aria-hidden="true">#</a> 什么是跨域</h1>\n<p>浏览器都具有同源策略  --- 协议 + 域名 + 端口  都相同</p>\n<p>http://   www   .    abc.com  :    8080   /    detail   <br>\n协议    子域名       主域名        端口        请求资源地址</p>\n<ul>\n<li>\n<p>同源策略限制了ajax请求</p>\n</li>\n<li>\n<p>没有被同源策略所影响的三个标签</p>\n</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>  <span class="token operator">&lt;</span>img src<span class="token operator">=</span>"xxx<span class="token operator">></span> \n  <span class="token operator">&lt;</span>link href<span class="token operator">=</span>"xxx<span class="token operator">></span>\n  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="常见的跨域场景" tabindex="-1"><a class="header-anchor" href="#常见的跨域场景" aria-hidden="true">#</a> 常见的跨域场景</h2>\n<p>http://www.a.com/a.js   <br>\nhttp://www.a.com/b.js      同一个域名，允许通信</p>\n<p>http://www.a.com/a.js     <br>\nhttps://www.a.com/a.js     协议不同，跨域</p>\n<p>http://www.a.com/a.js      <br>\nhttp://script.a.com/a.js\t 主域相同，子域不相同，跨域</p>\n<h2 id="特别说明" tabindex="-1"><a class="header-anchor" href="#特别说明" aria-hidden="true">#</a> 特别说明</h2>\n<ol>\n<li>如果是端口和协议照成的跨域，前端是没有办法解决的</li>\n<li>跨域仅仅只是根据url的首部 来识别，不会根据这个首部对应得ip地址来判断</li>\n<li>跨域并不是请求没有发出去，请求时能发出去得，服务器也是能响应的，只是响应结果被浏览器拦截了</li>\n</ol>\n<h2 id="跨域的解决方案" tabindex="-1"><a class="header-anchor" href="#跨域的解决方案" aria-hidden="true">#</a> 跨域的解决方案</h2>\n<h3 id="_1-jsonp" tabindex="-1"><a class="header-anchor" href="#_1-jsonp" aria-hidden="true">#</a> 1. jsonp</h3>\n<p>原理：<strong>利用script标签上的src属性不会被同源的策略所拦截的这一机制</strong>，将我们要请求的url地址，添加到script的src属性中，且携带上前端全局下的函数名作为参数给到后端，后端获取到前端传递的函数名，然后返回该函数的调用语法，将要返回的数据放在该函数的调用中作为参数，当浏览器接收到全局下的函数被调用的后端响应，会自动执行该函数，从而从参数中获取到后端返回的数据</p>\n<p>缺点：</p>\n<ol>\n<li>需要对方的服务器做支持才可以</li>\n<li>只支持<strong>get</strong> 请求，有局限性，可能会遭到 <strong>XSS攻击</strong></li>\n</ol>\n<h3 id="_2-cors" tabindex="-1"><a class="header-anchor" href="#_2-cors" aria-hidden="true">#</a> 2. cors</h3>\n<p>cors是W3C的标准，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求。也就是说浏览器发请求是不会被跨域的，跨域的核心是后端响应不了。</p>\n<blockquote>\n<p>要让后端响应内容能够补被浏览器拦截，关键在于后端。如果后端也能遵从CorS标准的话，后端的响应也可以跨源.</p>\n</blockquote>\n<p>分为简单请求和复杂请求两种：</p>\n<ul>\n<li>\n<p>简单请求<br>\n. 使用GET、POST、HEAD <br>\n. Content-Type的值仅限于:<strong>text/plain || multipart/from-data || application/x-www-from-urlencoded</strong></p>\n</li>\n<li>\n<p>复杂请求<br>\n.  不满足简单请求的条件的就是复杂请求<br>\n.  复杂请求的cors请求，会在正式通信之前，增加一次http查询请求，称为&quot;预检&quot;，预检是用来知道服务端是都允许跨域请求，预检请求发的是options方法</p>\n</li>\n</ul>\n<h3 id="_3-postmessage" tabindex="-1"><a class="header-anchor" href="#_3-postmessage" aria-hidden="true">#</a> 3. postMessage</h3>\n<p>html5中的 xhr 提供的API，postMessage()方法允许来自不同源的脚本采用异步的方法进行有限通信，可以实现跨文本，多窗口，跨域消息传递 <br>\n可以解决这么几个问题：</p>\n<ul>\n<li>页面和其他新的窗口的数据传递</li>\n<li>多窗口之间的消息传递</li>\n<li>页面与嵌套的iframe消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ul>\n<p>otherWindow.postMessage(message, targrtOrigin, [transfer])</p>\n<ul>\n<li>message: 要发送给其他window的数据</li>\n<li>targetOrigin: 目标窗口</li>\n<li>transfer(可选)和message一起传递的一个对象，这个对象的所有权限将移交给消息接收方</li>\n</ul>\n<p>缺点: <strong>场景比较简单</strong></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/study/study4.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"study4",filePath:"C:/Users/mi/Desktop/我的博客/docs/study/study4.md",filePathRelative:"study/study4.md",componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study4.html.vue",componentFilePathRelative:"pages/study/study4.html.vue",componentFileChunkName:"v-75bf51e2",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/study/study4.html.js",dataFilePathRelative:"pages/study/study4.html.js",dataFileChunkName:"v-75bf51e2",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/study/study4.html",htmlFilePathRelative:"study/study4.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-register/index.html.vue",componentFilePathRelative:"pages/aurora-register/index.html.vue",componentFileChunkName:"v-f693f690",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-register/index.html.js",dataFilePathRelative:"pages/aurora-register/index.html.js",dataFileChunkName:"v-f693f690",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-register/index.html",htmlFilePathRelative:"aurora-register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"C:/Users/mi/Desktop/我的博客/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"}]}},n=>{n.O(0,[954,590],(()=>(5698,n(n.s=5698)))),n.O()}]);